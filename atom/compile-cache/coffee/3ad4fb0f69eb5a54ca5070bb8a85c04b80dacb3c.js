(function() {
  var SplicerSplitter, path, _;

  _ = require('underscore-plus');

  path = require('path');

  SplicerSplitter = require('./../../lib/util/splicersplitter');

  describe('splicersplitter', function() {
    var splicersplitter;
    splicersplitter = [][0];
    beforeEach(function() {
      return splicersplitter = new SplicerSplitter();
    });
    describe('when working with space delimeted text', function() {
      it('splits the text into an array', function() {
        return runs(function() {
          var result;
          result = splicersplitter.splitAndSquashToArray(' ', ' -v  -b');
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(_.size(result)).toBe(2);
          expect(result[0]).toBeDefined();
          expect(result[0]).toBe('-v');
          expect(result[1]).toBeDefined();
          expect(result[1]).toBe('-b');
          result = splicersplitter.splitAndSquashToArray(' ', '     ');
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(_.size(result)).toBe(0);
          result = splicersplitter.splitAndSquashToArray(' ');
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          return expect(_.size(result)).toBe(0);
        });
      });
      return it('joins the array into a string', function() {
        return runs(function() {
          var result;
          result = splicersplitter.spliceAndSquash(['', ' ', ' -a ', '-b ', ' ', ' -c']);
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(result.length).toBe(8);
          expect(result).toBe('-a -b -c');
          result = result = splicersplitter.spliceAndSquash(['', ' ', '  ', ' ', ' ', '']);
          expect(result).toBeDefined();
          expect(result.length).toBe(0);
          expect(result).toBe('');
          result = result = splicersplitter.spliceAndSquash([]);
          expect(result).toBeDefined();
          expect(result.length).toBe(0);
          expect(result).toBe('');
          result = result = splicersplitter.spliceAndSquash();
          expect(result).toBeDefined();
          expect(result.length).toBe(0);
          return expect(result).toBe('');
        });
      });
    });
    return describe('when working with delimited text', function() {
      return it('splits the text into an array', function() {
        return runs(function() {
          var result;
          result = splicersplitter.splitAndSquashToArray(path.delimiter, path.delimiter + ' -v ' + path.delimiter + ' -b' + path.delimiter);
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(_.size(result)).toBe(2);
          expect(result[0]).toBeDefined();
          expect(result[0]).toBe('-v');
          expect(result[1]).toBeDefined();
          return expect(result[1]).toBe('-b');
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL3NzdW4vLmF0b20vcGFja2FnZXMvZ28tcGx1cy9zcGVjL3V0aWwvc3BsaWNlcnNwbGl0dGVyLXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLHdCQUFBOztBQUFBLEVBQUEsQ0FBQSxHQUFJLE9BQUEsQ0FBUSxpQkFBUixDQUFKLENBQUE7O0FBQUEsRUFDQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FEUCxDQUFBOztBQUFBLEVBRUEsZUFBQSxHQUFrQixPQUFBLENBQVEsa0NBQVIsQ0FGbEIsQ0FBQTs7QUFBQSxFQUlBLFFBQUEsQ0FBUyxpQkFBVCxFQUE0QixTQUFBLEdBQUE7QUFDMUIsUUFBQSxlQUFBO0FBQUEsSUFBQyxrQkFBbUIsS0FBcEIsQ0FBQTtBQUFBLElBRUEsVUFBQSxDQUFXLFNBQUEsR0FBQTthQUNULGVBQUEsR0FBc0IsSUFBQSxlQUFBLENBQUEsRUFEYjtJQUFBLENBQVgsQ0FGQSxDQUFBO0FBQUEsSUFLQSxRQUFBLENBQVMsd0NBQVQsRUFBbUQsU0FBQSxHQUFBO0FBRWpELE1BQUEsRUFBQSxDQUFHLCtCQUFILEVBQW9DLFNBQUEsR0FBQTtlQUNsQyxJQUFBLENBQUssU0FBQSxHQUFBO0FBQ0gsY0FBQSxNQUFBO0FBQUEsVUFBQSxNQUFBLEdBQVMsZUFBZSxDQUFDLHFCQUFoQixDQUFzQyxHQUF0QyxFQUEyQyxTQUEzQyxDQUFULENBQUE7QUFBQSxVQUNBLE1BQUEsQ0FBTyxNQUFQLENBQWMsQ0FBQyxXQUFmLENBQUEsQ0FEQSxDQUFBO0FBQUEsVUFFQSxNQUFBLENBQU8sTUFBUCxDQUFjLENBQUMsVUFBZixDQUFBLENBRkEsQ0FBQTtBQUFBLFVBR0EsTUFBQSxDQUFPLENBQUMsQ0FBQyxJQUFGLENBQU8sTUFBUCxDQUFQLENBQXNCLENBQUMsSUFBdkIsQ0FBNEIsQ0FB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

//# sourceURL=/Users/ssun/.atom/packages/go-plus/spec/util/splicersplitter-spec.coffee
