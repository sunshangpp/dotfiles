(function() {
  var Environment, PathExpander, PathHelper, path, _;

  _ = require('underscore-plus');

  path = require('path');

  PathExpander = require('./../../lib/util/pathexpander');

  PathHelper = require('./pathhelper.coffee');

  Environment = require('./../../lib/environment');

  describe('pathexpander', function() {
    var environment, gopath, pathexpander, pathhelper, _ref;
    _ref = [], environment = _ref[0], pathexpander = _ref[1], pathhelper = _ref[2], gopath = _ref[3];
    beforeEach(function() {
      environment = new Environment(process.env);
      pathexpander = new PathExpander(environment.Clone());
      return pathhelper = new PathHelper();
    });
    describe('when working with a single-item path', function() {
      return it('expands the path', function() {
        return runs(function() {
          var result;
          result = pathexpander.expand(path.join('~', 'go', 'go', '..', 'bin', 'goimports'), '~/go');
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(result).toBe(path.join(pathhelper.home(), 'go', 'bin', 'goimports'));
          result = pathexpander.expand(path.join('$GOPATH', 'go', '..', 'bin', 'goimports'), '~/go');
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          return expect(result).toBe(path.join(pathhelper.home(), 'go', 'bin', 'goimports'));
        });
      });
    });
    return describe('when working with a multi-item path', function() {
      return it('expands the path', function() {
        return runs(function() {
          var result;
          result = pathexpander.expand(path.join('~', 'go', 'go', '..', 'bin', 'goimports'), '~/go' + path.delimiter + '~/othergo');
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(result).toBe(path.join(pathhelper.home(), 'go', 'bin', 'goimports'));
          result = pathexpander.expand(path.join('$GOPATH', 'go', '..', 'bin', 'goimports'), '~/go' + path.delimiter + '~/othergo');
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          return expect(result).toBe(path.join(pathhelper.home(), 'go', 'bin', 'goimports'));
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL3NzdW4vLmF0b20vcGFja2FnZXMvZ28tcGx1cy9zcGVjL3V0aWwvcGF0aGV4cGFuZGVyLXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDhDQUFBOztBQUFBLEVBQUEsQ0FBQSxHQUFJLE9BQUEsQ0FBUSxpQkFBUixDQUFKLENBQUE7O0FBQUEsRUFDQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FEUCxDQUFBOztBQUFBLEVBRUEsWUFBQSxHQUFlLE9BQUEsQ0FBUSwrQkFBUixDQUZmLENBQUE7O0FBQUEsRUFHQSxVQUFBLEdBQWEsT0FBQSxDQUFRLHFCQUFSLENBSGIsQ0FBQTs7QUFBQSxFQUlBLFdBQUEsR0FBYyxPQUFBLENBQVEseUJBQVIsQ0FKZCxDQUFBOztBQUFBLEVBTUEsUUFBQSxDQUFTLGNBQVQsRUFBeUIsU0FBQSxHQUFBO0FBQ3ZCLFFBQUEsbURBQUE7QUFBQSxJQUFBLE9BQWtELEVBQWxELEVBQUMscUJBQUQsRUFBYyxzQkFBZCxFQUE0QixvQkFBNUIsRUFBd0MsZ0JBQXhDLENBQUE7QUFBQSxJQUVBLFVBQUEsQ0FBVyxTQUFBLEdBQUE7QUFDVCxNQUFBLFdBQUEsR0FBa0IsSUFBQSxXQUFBLENBQVksT0FBTyxDQUFDLEdBQXBCLENBQWxCLENBQUE7QUFBQSxNQUNBLFlBQUEsR0FBbUIsSUFBQSxZQUFBLENBQWEsV0FBVyxDQUFDLEtBQVosQ0FBQSxDQUFiLENBRG5CLENBQUE7YUFFQSxVQUFBLEdBQWlCLElBQUEsVUFBQSxDQUFBLEVBSFI7SUFBQSxDQUFYLENBRkEsQ0FBQTtBQUFBLElBT0EsUUFBQSxDQUFTLHNDQUFULEVBQWlELFNBQUEsR0FBQTthQUUvQyxFQUFBLENBQUcsa0JBQUgsRUFBdUIsU0FBQSxHQUFBO2VBQ3JCLElBQUEsQ0FBSyxTQUFBLEdBQUE7QUFDSCxj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

//# sourceURL=/Users/ssun/.atom/packages/go-plus/spec/util/pathexpander-spec.coffee
