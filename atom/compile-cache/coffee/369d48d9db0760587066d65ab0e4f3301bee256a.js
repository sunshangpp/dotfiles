(function() {
  var $, BLANK_HASH, BlameLineComponent, HASH_LENGTH, RP, React, Reactionary, a, div, formatDate, getDefaultDate, moment, renderLoading, span, _defaultDate, _ref;

  _ref = require('atom'), $ = _ref.$, React = _ref.React, Reactionary = _ref.Reactionary;

  div = Reactionary.div, span = Reactionary.span, a = Reactionary.a;

  RP = React.PropTypes;

  moment = require('moment');

  formatDate = require('../util/blameFormatter').formatDate;

  HASH_LENGTH = 7;

  BLANK_HASH = '-'.repeat(HASH_LENGTH);

  _defaultDate = null;

  getDefaultDate = function() {
    return _defaultDate != null ? _defaultDate : _defaultDate = formatDate(moment("2014-01-01T13:37:00 Z"));
  };

  renderLoading = function() {
    return div({
      className: 'blame-line loading'
    }, span({
      className: 'hash'
    }, BLANK_HASH), span({
      className: 'date'
    }, getDefaultDate()), span({
      className: 'committer'
    }, 'Loading'));
  };

  BlameLineComponent = React.createClass({
    propTypes: {
      date: RP.string.isRequired,
      hash: RP.string.isRequired,
      remoteRevision: RP.object.isRequired,
      author: RP.string.isRequired,
      committer: RP.string.isRequired,
      committerDate: RP.string.isRequired,
      summary: RP.string.isRequired,
      backgroundClass: RP.string,
      noCommit: RP.bool
    },
    render: function() {
      var url;
      if (this.props.noCommit) {
        return div({
          className: 'blame-line no-commit text-subtle'
        }, span({
          className: 'hash'
        }, BLANK_HASH), span({
          className: 'date'
        }, this.props.date), span({
          className: 'committer'
        }, 'Nobody'));
      } else {
        url = this.props.remoteRevision.url(this.props.hash);
        return div({
          className: 'blame-line ' + this.props.backgroundClass
        }, a({
          className: 'hash',
          href: url
        }, this.props.hash.substring(0, HASH_LENGTH)), span({
          className: 'date'
        }, this.props.date), span({
          className: 'committer text-highlight'
        }, this.props.author.split(' ').slice(-1)[0]));
      }
    },
    componentDidMount: function() {
      var $el;
      $el = $(this.getDOMNode());
      if (this.props.summary) {
        return $el.setTooltip({
          title: this.props.summary,
          placement: "auto left"
        });
      }
    },
    componentWillUnmount: function() {
      return $(this.getDOMNode()).tooltip("destroy");
    },
    shouldComponentUpdate: function(_arg) {
      var hash;
      hash = _arg.hash;
      return hash !== this.props.hash;
    }
  });

  module.exports = {
    BlameLineComponent: BlameLineComponent,
    renderLoading: renderLoading
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDJKQUFBOztBQUFBLEVBQUEsT0FBMEIsT0FBQSxDQUFRLE1BQVIsQ0FBMUIsRUFBQyxTQUFBLENBQUQsRUFBSSxhQUFBLEtBQUosRUFBVyxtQkFBQSxXQUFYLENBQUE7O0FBQUEsRUFDQyxrQkFBQSxHQUFELEVBQU0sbUJBQUEsSUFBTixFQUFZLGdCQUFBLENBRFosQ0FBQTs7QUFBQSxFQUVBLEVBQUEsR0FBSyxLQUFLLENBQUMsU0FGWCxDQUFBOztBQUFBLEVBR0EsTUFBQSxHQUFTLE9BQUEsQ0FBUSxRQUFSLENBSFQsQ0FBQTs7QUFBQSxFQUlDLGFBQWMsT0FBQSxDQUFRLHdCQUFSLEVBQWQsVUFKRCxDQUFBOztBQUFBLEVBTUEsV0FBQSxHQUFjLENBTmQsQ0FBQTs7QUFBQSxFQU9BLFVBQUEsR0FBYSxHQUFHLENBQUMsTUFBSixDQUFXLFdBQVgsQ0FQYixDQUFBOztBQUFBLEVBU0EsWUFBQSxHQUFlLElBVGYsQ0FBQTs7QUFBQSxFQVVBLGNBQUEsR0FBaUIsU0FBQSxHQUFBO2tDQUNmLGVBQUEsZUFBZ0IsVUFBQSxDQUFXLE1BQUEsQ0FBTyx1QkFBUCxDQUFYLEVBREQ7RUFBQSxDQVZqQixDQUFBOztBQUFBLEVBY0EsYUFBQSxHQUFnQixTQUFBLEdBQUE7V0FDZCxHQUFBLENBQUk7QUFBQSxNQUFBLFNBQUEsRUFBVyxvQkFBWDtLQUFKLEVBQ0UsSUFBQSxDQUFLO0FBQUEsTUFBQSxTQUFBLEVBQVcsTUFBWDtLQUFMLEVBQXdCLFVBQXhCLENBREYsRUFFRSxJQUFBLENBQUs7QUFBQSxNQUFBLFNBQUEsRUFBVyxNQUFYO0tBQUwsRUFBd0IsY0FBQSxDQUFBLENBQXhCLENBRkYsRUFHRSxJQUFBLENBQUs7QUFBQSxNQUFBLFNBQUEsRUFBVyxXQUFYO0tBQUwsRUFBNkIsU0FBN0Is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
//# sourceURL=/Users/ssun/.atom/packages/git-blame/lib/views/blame-line-view.coffee