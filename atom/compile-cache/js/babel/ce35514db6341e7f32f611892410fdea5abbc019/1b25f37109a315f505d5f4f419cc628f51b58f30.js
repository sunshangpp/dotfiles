Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.init = init;
exports.dispose = dispose;
exports.serialize = serialize;
exports.indexOfBreakpoint = indexOfBreakpoint;
exports.getBreakpoint = getBreakpoint;
exports.getBreakpoints = getBreakpoints;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _redux = require('redux');

'use babel';

var assign = function assign() {
  for (var _len = arguments.length, items = Array(_len), _key = 0; _key < _len; _key++) {
    items[_key] = arguments[_key];
  }

  return Object.assign.apply(Object, [{}].concat(items));
};

function updateArrayItem(array, index, o) {
  return array.slice(0, index).concat(assign(array[index], o), array.slice(index + 1));
}

function stacktrace(state, action) {
  if (state === undefined) state = [];

  switch (action.type) {
    case 'RESTART':
    case 'STOP':
      return [];

    case 'UPDATE_STACKTRACE':
      // attempt to copy the variables over to the new stacktrace
      return action.stacktrace.map(function (stack) {
        var existingStack = state.find(function (st) {
          return st.pc === stack.pc;
        });
        if (!stack.variables && existingStack) {
          stack.variables = existingStack.variables;
        }
        return stack;
      });

    case 'UPDATE_VARIABLES':
      var variables = state[action.index].variables;
      if (action.path) {
        // update the variable at 'path' to loaded
        variables = assign(variables, _defineProperty({}, action.path, assign(variables[action.path], { loaded: true })));
      }

      // TODO: update each variable in action.variables on its own? probably...
      variables = assign(variables, action.variables);
      return updateArrayItem(state, action.index, { variables: variables });
  }
  return state;
}
function goroutines(state, action) {
  if (state === undefined) state = [];

  switch (action.type) {
    case 'RESTART':
    case 'STOP':
      return [];

    case 'UPDATE_GOROUTINES':
      return action.goroutines;
  }
  return state;
}
function breakpoints(state, action) {
  if (state === undefined) state = [];
  var bp = action.bp;

  var _ref = bp || {};

  var file = _ref.file;
  var line = _ref.line;

  var index = indexOfBreakpoint(state, file, line);
  switch (action.type) {
    case 'ADD_BREAKPOINT':
      if (index === -1) {
        return state.concat(bp).sort(function (a, b) {
          var s = a.file.localeCompare(b.file);
          return s !== 0 ? s : a.line - b.line;
        });
      }
      return updateArrayItem(state, index, bp);

    case 'REMOVE_BREAKPOINT':
      if (bp.state !== 'busy') {
        return index === -1 ? state : state.slice(0, index).concat(state.slice(index + 1));
      }
      return updateArrayItem(state, index, bp);

    case 'UPDATE_BREAKPOINT_LINE':
      if (index !== -1) {
        return updateArrayItem(state, index, { line: action.newLine });
      }
      return state;

    case 'STOP':
      return state.map(function (_ref2) {
        var file = _ref2.file;
        var line = _ref2.line;

        return { file: file, line: line, state: 'notStarted' };
      });
  }

  return state;
}
function state(state, action) {
  if (state === undefined) state = 'notStarted';

  switch (action.type) {
    case 'STOP':
      return 'notStarted';

    case 'RESTART':
      return 'started';

    case 'SET_STATE':
      return action.state;

    case 'SET_SELECTED_GOROUTINE':
      return action.state;
  }
  return state;
}
function selectedStacktrace(state, action) {
  if (state === undefined) state = 0;

  switch (action.type) {
    case 'RESTART':
    case 'STOP':
      return 0;

    case 'SET_SELECTED_STACKTRACE':
      return action.index;

    case 'UPDATE_STACKTRACE':
      return 0; // set back to the first function on each update
  }
  return state;
}
function selectedGoroutine(state, action) {
  if (state === undefined) state = 0;

  switch (action.type) {
    case 'RESTART':
    case 'STOP':
      return 0;

    case 'SET_SELECTED_GOROUTINE':
      return action.id;
  }
  return state;
}
function args(state, action) {
  if (state === undefined) state = '';

  if (action.type === 'UPDATE_ARGS') {
    return action.args;
  }
  return state;
}
function path(state, action) {
  if (state === undefined) state = '';

  if (action.type === 'SET_DLV_PATH') {
    return action.path;
  }
  return state;
}

function fileOverride(state, action) {
  if (state === undefined) state = '';

  if (action.type === 'UPDATE_FILE_OVERRIDE') {
    return action.fileOverride;
  }
  return state;
}

var delve = (0, _redux.combineReducers)({
  stacktrace: stacktrace,
  goroutines: goroutines,
  breakpoints: breakpoints,
  state: state,
  selectedStacktrace: selectedStacktrace,
  selectedGoroutine: selectedGoroutine,
  args: args,
  fileOverride: fileOverride,
  path: path
});

function editors(state, action) {
  if (state === undefined) state = {};

  void action;
  return state;
}
var getDefaultPanel = function getDefaultPanel() {
  return { visible: atom.config.get('go-debug.panelInitialVisible') };
};
function panel(state, action) {
  if (!state) {
    state = getDefaultPanel();
  }
  switch (action.type) {
    case 'TOGGLE_PANEL':
      return assign(state, { visible: 'visible' in action ? action.visible : !state.visible });

    case 'SET_PANEL_WIDTH':
      return assign(state, { width: action.width });
  }
  return state;
}
var defaultOutput = {
  messages: [],
  visible: false,
  filters: { delve: true, output: true }
};
function output(state, action) {
  if (state === undefined) state = defaultOutput;

  switch (action.type) {
    case 'TOGGLE_OUTPUT':
      return assign(state, { visible: 'visible' in action ? action.visible : !state.visible });

    case 'CLEAN_OUTPUT':
      return assign(state, { messages: [] });

    case 'ADD_OUTPUT_MESSAGE':
      {
        var messages = state.messages.concat({ message: action.message, type: action.messageType });
        return assign(state, { messages: messages });
      }

    case 'TOGGLE_OUTPUT_FILTER':
      return assign(state, {
        filters: assign(state.filters, _defineProperty({}, action.filter, !state.filters[action.filter]))
      });
  }
  return state;
}
function variables(state, action) {
  if (state === undefined) state = { expanded: {} };

  switch (action.type) {
    case 'TOGGLE_VARIABLE':
      var expanded = assign(state.expanded, _defineProperty({}, action.path, 'expanded' in action ? action.expanded : !state.expanded[action.path]));
      return assign(state, { expanded: expanded });
  }
  return state;
}

var store = undefined;

exports.store = store;

function init(state) {
  if (state.breakpoints) {
    state.delve = { breakpoints: state.breakpoints };
    delete state.breakpoints;
  }
  state.panel = assign(getDefaultPanel(), state.panel);

  exports.store = store = (0, _redux.createStore)((0, _redux.combineReducers)({
    editors: editors,
    panel: panel,
    delve: delve,
    output: output,
    variables: variables
  }), state);
}

function dispose() {
  exports.store = store = null;
}

function serialize() {
  var state = store.getState();
  return {
    panel: state.panel,
    delve: {
      breakpoints: state.delve.breakpoints.map(function (_ref3) {
        var file = _ref3.file;
        var line = _ref3.line;
        return { file: file, line: line };
      }),
      args: state.delve.args,
      fileOverride: state.delve.fileOverride
    }
  };
}

function indexOfBreakpoint(bps, file, line) {
  return bps.findIndex(function (bp) {
    return bp.file === file && bp.line === line;
  });
}

function getBreakpoint(file, line) {
  var bps = store.getState().delve.breakpoints;
  var index = indexOfBreakpoint(bps, file, line);
  return index === -1 ? null : bps[index];
}

function getBreakpoints(file) {
  var bps = store.getState().delve.breakpoints;
  return !file ? bps : bps.filter(function (bp) {
    return bp.file === file;
  });
}
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/ssun/.atom/packages/go-debug/lib/store.js
