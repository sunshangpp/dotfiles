{"mode":"editor","version":1,"windowDimensions":{"x":57,"y":23,"width":1223,"height":777,"maximized":false},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{"/Users/ssun/Projects/tumblr/tumblr/app/views/main/_trackers.php.tpl":"text.html.php"}},"project":{"path":"/Users/ssun/Projects/tumblr/tumblr","buffers":[{"text":"<!DOCTYPE html>\n<html>\n    <head>\n        <title>Tumblr</title>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n        <meta name=\"robots\" content=\"noindex, nofollow\">\n        <link rel=\"icon\" href=\"http://assets.tumblr.com/images/favicons/favicon.ico?1\" type=\"image/gif\">\n\n\n        <script type=\"text/javascript\">\n            function log(message) {\n                if (debug) console.log(message);\n            }\n\n            var user_logged_in = 'No';\n            var blog_is_nsfw = 'No';\n            var parent_origin = location.hash.slice(1);\n\n            window.parent.postMessage('analytics_iframe_loaded', parent_origin);\n\n            var Tumblr = {\n                Analytics: {\n                    create_post_message_listener: function() {\n                        // http://davidwalsh.name/window-iframe\n                        // Create IE + others compatible event handler\n                        var eventMethod = window.addEventListener ? \"addEventListener\" : \"attachEvent\";\n                        var eventer = window[eventMethod];\n                        var messageEvent = eventMethod == \"attachEvent\" ? \"onmessage\" : \"message\";\n\n                        // Listen to message from child window\n                        eventer(messageEvent,function(e) {\n                            var message = (e.data && e.data.split) ? e.data.split(';') : '';\n                            Tumblr.Analytics.handle_post_message(message, e.origin);\n                        }, false);\n                    },\n\n                    handle_post_message: function(message, origin) {\n                        switch (message[0]) {\n                            case 'openInMobileApp':\n                                var post_id = parseInt(message[1]),\n                                    custom_event = ['_trackEvent', 'Mobile', 'Clicked', 'Open in Mobile App', post_id ];\n\n                                _gaq.push(custom_event);\n\n                                parent.postMessage('openInMobileAppSuccess' + ';' + post_id, message[2]);\n                                break;\n\n                            case 'tick_google_analytics':\n                                // ajax message format: tick_google_analytics; is_ajax; path; override_route\n                                // non-ajax message format: tick_google_analytics; is_ajax; user_logged_in; blog_is_nsfw; path;\n                                var is_ajax = message[1];\n                                var track_url;\n                                if (is_ajax == 'false') {\n                                    user_logged_in = message[2];\n                                    blog_is_nsfw = message[3];\n                                    track_url = Tumblr.Analytics.get_ga_url(message.slice(4, message.length));\n                                    // post message here to notify parent window that non-ajax load message is received\n                                    window.parent.postMessage('analytics_iframe_ga_non_ajax_received', parent_origin);\n                                } else if (is_ajax == 'true') {\n                                    track_url = Tumblr.Analytics.get_ga_url(message.slice(2, message.length));\n                                }\n\n                                if (track_url) {\n                                    log('Tracking GA: ' + '/analytics.html?page=' + track_url + \";  user_logged_in=\"+user_logged_in + \"; is_nsfw=\"+blog_is_nsfw);\n                                    // set GA custom variable for user_logged_in status\n                                    _gaq.push(['_setCustomVar', 2, 'User_Logged_In', user_logged_in, 3]);\n                                    ga('set', 'dimension2', user_logged_in);\n                                    // set GA custom variable for nsfw\n                                    _gaq.push(['_setCustomVar', 3, 'NSFW', blog_is_nsfw, 3]);\n                                    ga('set', 'dimension3', blog_is_nsfw);\n                                    _gaq.push(['_trackPageview', '/analytics.html?page=' + track_url]);\n                                    ga('send', 'pageview', '/analytics.html?page=' + track_url);\n                                }\n                                break;\n\n                            case 'enable_comscore':\n                            case 'tick_comscore':\n                                var url = message[1];\n                                log({ c1: \"7\", c2: 15742520, c4: url });\n                                log({ c1: \"2\", c2: 15742520, c4: url });\n                                if (typeof(COMSCORE) !== 'undefined') {\n                                    COMSCORE.beacon({ c1: '7', c2: '15742520', c4: url });\n                                    COMSCORE.beacon({ c1: '2', c2: '15742520', c4: url });\n                                } else {\n                                  _comscore.push({ c1: \"7\", c2: 15742520, c4: url });\n                                  _comscore.push({ c1: \"2\", c2: 15742520, c4: url });\n                                  var s   = document.createElement(\"script\"),\n                                      el  = document.getElementsByTagName(\"script\")[0];\n                                  s.async = true;\n                                  s.src = (document.location.protocol == \"https:\" ? \"https://sb\" : \"http://b\") + \".scorecardresearch.com/c2/15742520/cs.js\";\n                                  el.parentNode.insertBefore(s, el);\n                                }\n                                break;\n\n                            case 'enable_addthis':\n                                var el = document.getElementsByTagName(\"script\")[0],\n                                    addthis_iframe  = document.createElement(\"iframe\");\n\n                                addthis_iframe.width = 1;\n                                addthis_iframe.height = 1;\n                                addthis_iframe.scrolling = false;\n                                addthis_iframe.src = \"//safe.txmblr.com/addthis.html\";\n\n                                el.parentNode.insertBefore(addthis_iframe, el);\n                                break\n                        }\n                    },\n\n                    get_url_var: function(get_var, url) {\n                        url = url || window.location.href\n\n                        var vars = {};\n                        url.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {\n                            vars[key] = value;\n                        });\n\n                        if (get_var) {\n                            return vars[get_var];\n                        } else {\n                            return vars;\n                        }\n                    },\n\n                    get_ga_url: function(message) {\n                        var parser = document.createElement('a');\n                        message = message || [];\n\n                        if (message[0] === '') message[0] = '/';\n                        parser.href  = message[0] || document.referrer;\n                        var page_uri = parser.href;\n                        var page_path = parser.pathname;\n\n                        // Make sure path starts with a /\n                        if (!page_path.match(/^\\//)) page_path = '/' + page_path;\n                        if (page_path.match(/^\\/analytics\\.html/)) return false;\n\n                        // Add parameters as needed.\n                        page_path += '&route=' + (message[1] || Tumblr.Analytics.get_url_var('route', page_uri));\n                        if (Tumblr.Analytics.get_url_var('utm_campaign')) page_path += '&utm_campaign=' + Tumblr.Analytics.get_url_var('utm_campaign');\n                        if (Tumblr.Analytics.get_url_var('utm_medium'))   page_path += '&utm_medium='   + Tumblr.Analytics.get_url_var('utm_medium');\n                        if (Tumblr.Analytics.get_url_var('utm_source'))   page_path += '&utm_source='   + Tumblr.Analytics.get_url_var('utm_source');\n\n                        return page_path;\n                    }\n                }\n            };\n\n            var debug     = false\n              , _gaq      = _gaq || []\n              , _comscore = _comscore || [];\n\n            _gaq.push(['_setAccount', 'UA-97144-8']);\n            _gaq.push(['_setAllowLinker', true]);\n            _gaq.push(['_setDomainName', 'tumblr.com']);\n\n            (function(){\n                var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n            })();\n\n            // Google Universal Analytics\n            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n                    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n            })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n            ga('create', 'UA-97144-14', 'tumblr.com', {\n                'allowLinker': true,\n                'sampleRate': 0.7\n            });\n\n            Tumblr.Analytics.create_post_message_listener();\n        </script>\n        <noscript><img src=\"http://b.scorecardresearch.com/p?c1=7&amp;c2=15742520&amp;cv=2.0&amp;cj=1\" /></noscript>\n        <noscript><img src=\"http://b.scorecardresearch.com/p?c1=2&amp;c2=15742520&amp;cv=2.0&amp;cj=1\" /></noscript>\n    </head>\n    <body>\n    </body>\n</html>\n","markers":{"markers":{"1":{"id":1,"range":[[78,61],[78,61]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":48,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/ssun/Projects/tumblr/tumblr/www/analytics.html","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"d99a294ae68d6b3c5986d2e5a23721d30f9bb13c","deserializer":"TextBuffer"},{"text":"<?php\n/*\n * This file is part of the Chorus development library.\n * Copyright (c) 2006-2011, Tumblr, Inc.\n * All rights reserved.\n */\n\nrequire_once('lib/helpers.php');\nrequire_once(\"lib/JSON.php\");\n\nuse Tumblr\\Profiler\\Profiler;\n\n    class Controller\n    {\n        const CONTROLLER_PATH_TPL = 'controllers/%s.php';\n\n        public $layout;\n        public $layout_file = false;\n        public $view     = false;\n        public $view_file = false;\n        public $sub_view = false;\n        public $mobile_view = false;\n        public $mobile_view_file = false;\n        public $show_log = true;\n        public $_http_status = 200;\n        public $_headers = array(); //array('Content-Type' => 'text/html; charset=utf-8');\n        public $content_for_layout;\n\n        /* @var HttpRequest */\n        public $request;\n        public $response;\n\n        public $disable_mobile_views = false;\n\n        public static $current_controller = false;\n        public static $root_app_path = false;\n\n        /**\n         * An array used to store slot content\n         *\n         * @var array\n         */\n        protected $slots = array();\n\n        /**\n         * Stack of currently defined slots\n         *\n         * @var array\n         */\n        protected $slot_stack = array();\n\n        /**\n         * Array of methods to run before each action is called\n         *\n         * @var string|array\n         */\n        protected static $pre_execute_action;\n\n        public function __construct()\n        {\n            $this->request  = HttpRequest::get_instance();\n            $this->response = HttpResponse::get_instance();\n        }\n\n        public static function execute($controller, $action)\n        {\n            $app_filepath = self::build_filepath('app');\n            if (!class_exists('AppController', false) && file_exists($app_filepath)) {\n                Log::start_timer('include_app_controller');\n                require_once($app_filepath);\n                Log::stop_timer('include_app_controller');\n            }\n\n            $action         = strtolower($action);\n            $controller_obj = self::build_controller_object($controller);\n\n            if ($controller_obj) {\n                self::$current_controller = $controller_obj;\n\n                $execute_action_start = microtime(true);\n                $html = $controller_obj->execute_action($action);\n                $execute_action_end = microtime(true);\n\n                $indef_tag_value = $controller . \"-\" . $action;\n                Indefatigable::aggregate_tick(\"execute_action\", $indef_tag_value, $execute_action_end-$execute_action_start);\n\n                // if ((defined('SHOW_CHORUS_LOG') && SHOW_CHORUS_LOG) || (! defined('SHOW_CHORUS_LOG') && ENVIRONMENT == 'development')) {\n                //     $controller_obj->set_header('X-TUMBLR-DOODS', json_encode(DoodRanch::current(true), JSON_FORCE_OBJECT));\n                // }\n\n                foreach ($controller_obj->get_headers() as $n => $v) {\n                    header($n . ': ' . $v);\n                }\n\n                Log::start_timer('dbclose');\n                if (class_exists('Database', false)) Database::close_all();\n                Log::stop_timer('dbclose');\n                return $html;\n\n            } else {\n\n                // api routes are the exception to this rule\n                if ($_SERVER['HTTP_HOST'] == \"api.tumblr.com\") {\n                    require_once('app/controllers/api_controller.php');\n                    Api_Controller::not_found();\n                    return;\n                }\n\n                // 404\n                if (defined('ROUTES_404_CONTROLLER')) {\n                    $controller = ROUTES_404_CONTROLLER;\n                    $filepath = self::build_filepath($controller);\n                    if (file_exists($filepath)) {\n                        require_once($filepath);\n                    }\n\n                    if (! defined('ROUTES_404_ACTION')) define('ROUTES_404_ACTION', 'execute_404');\n\n                    if (class_exists(ROUTES_404_CONTROLLER, false)) {\n                        $_GET['controller'] = ROUTES_404_CONTROLLER;\n                        $_GET['action'] = ROUTES_404_ACTION;\n                        return self::execute(ROUTES_404_CONTROLLER, ROUTES_404_ACTION);\n                    }\n                }\n\n                ob_start();\n                $controller = new self;\n                $controller->execute_404();\n                $html = ob_get_contents();\n                ob_end_clean();\n                return $html;\n            }\n        }\n\n        public static function build_controller_object($controller)\n        {\n            if (!$controller) return false;\n\n            $controller_classname = self::get_controller_classname($controller);\n\n            if (!class_exists($controller_classname, false)) {\n                if (!$controller_filepath = self::get_controller_filepath($controller)) {\n                    return false;\n                }\n\n                Log::start_timer('include');\n                require_once($controller_filepath);\n                Log::stop_timer('include');\n\n                if (!$controller || !class_exists($controller_classname, false)) {\n                    return false;\n                }\n            }\n\n            Log::start_timer('construct');\n            $controller_obj = new $controller_classname;\n            Log::stop_timer('construct');\n\n            return $controller_obj;\n        }\n\n        public static function build_filepath($filename)\n        {\n            $filepath = sprintf(self::CONTROLLER_PATH_TPL, $filename);\n\n            if (strpos('/', $filepath) !== 0) {\n                $root = self::$root_app_path ? self::$root_app_path : APP_PATH;\n                $filepath = $root . '/' . $filepath;\n            }\n\n            return $filepath;\n        }\n\n        public static function get_controller_filepath($controller)\n        {\n            // We are currently supporting the old style _ names, until the converesion\n            // to subdirectories is complete.\n            $filename = strtolower(preg_replace(\"/\\W/\", \"\", $controller));\n            $filepath = self::build_filepath($filename);\n\n            if (!file_exists($filepath)) {\n                $filename = str_replace('_', '/', $controller);\n                $filepath = self::build_filepath($filename);\n                if (!file_exists($filepath)) {\n                    return false;\n                }\n            }\n\n            return $filepath;\n        }\n\n        public static function get_controller_classname($controller)\n        {\n            $cname = str_replace('_', ' ', $controller);\n            $cname = ucwords($cname);\n            $cname = str_replace(' ', '_', $cname) . 'Controller';\n\n            return $cname;\n        }\n\n        public function http_status($status_code)\n        {\n            if( $status_code != 404) Log::warning('redirect', 'Redirects for status codes other than 404 should use HttpResponse::exit_with_http_status()');\n            $this->_http_status = $status_code;\n        }\n\n        public function execute_404()\n        {\n            header('HTTP/1.1 404 Not Found');\n            header('Cache-Control: max-age=300');\n            header('Content-Type: text/html');\n            $this->status_404();\n        }\n\n        // Default 404 handler\n        public function status_404()\n        {\n            include WWW_PATH . '/404.html';\n        }\n\n        public function get_headers() { return $this->_headers; }\n\n        public function set_header($name, $value, $override_previous = true)\n        {\n            if (! $name) throw new Exception('Header must have a name');\n            if (! $override_previous) {\n                if (isset($this->_headers[$name])) return;\n                foreach (headers_list() as $h) {\n                    if (strtolower(substr($h, 0, strpos($h, ':'))) == strtolower($name)) {\n                        return;\n                    }\n                }\n            }\n            $this->_headers[$name] = $value;\n        }\n\n        public function __get_view_filename($controller, $action, $view_path=null)\n        {\n            $view_file = $view_path . '/' . $controller . \"/$action.php\";\n            if (!$this->view_file_exists($view_file)) {\n                $view_file = $view_path . '/' . str_replace('_', '/', $controller) . \"/$action.php\";\n            }\n\n            return $view_file;\n        }\n\n        private function view_file_exists($view_file)\n        {\n            return is_file($view_file) || is_file($view_file . Config::$template_extension);\n        }\n\n        public function view_exists($view)\n        {\n            return ViewRenderer::view_exists($view);\n        }\n\n        /**\n         * Runs methods before the action is called.\n         *\n         * Inside the controller define the $pre_execute_action static variable\n         *\n         *     class MyController extends Controller {\n         *         static $pre_execute_action = 'my_global_method';\n         *\n         *         static $pre_execute_action = array(\n         *             'my_other_method',\n         *             'my_sometimes_method' => array('index','show'),\n         *         );\n         *\n         *         function my_other_method($action) {\n         *             // Do something every time;\n         *         }\n         *\n         *         function my_sometimes_method($action) {\n         *             // Logic only in index and show actions\n         *         }\n         *     }\n         */\n        function pre_execute_action($action)\n        {\n            if (!empty(static::$pre_execute_action)) {\n                // Make sure we are working with an array from here on\n                $pre_execute_action = (array) static::$pre_execute_action;\n                foreach ($pre_execute_action as $method => $actions) {\n                    if (is_array($actions)) {\n                        if (in_array($action, $actions)) {\n                            Log::add('controller', 'Pre Execute Action: ' . $method);\n                            $this->$method($action);\n                        }\n                    } else {\n                        $method = $actions;\n                        Log::add('controller', 'Pre Execute Action: ' . $method);\n                        $this->$method($action);\n                    }\n                }\n            }\n        }\n\n        /**\n         * This method is run before every action call, if it returns false a\n         * 404 is rendered. Used primarily to dood off actions.\n         *\n         *     class MyController extends Controller {\n         *\n         *         function controller_action_visible($action) {\n         *             static $for_actions = array('index','show');\n         *             if (in_array($action,$for_actions)) {\n         *                 return Dood::when('special_actions_visible', array('user' => $this->user));\n         *             } else {\n         *                 return true;\n         *             }\n         *         }\n         *     }\n         */\n        function controller_action_visible($action)\n        {\n            return true;\n        }\n\n        public function execute_action($action)\n        {\n            $controller    = strtolower(str_ireplace('controller', '', get_class($this)));\n            $action        = strtolower($action);\n            $view_path     = VIEW_PATH;\n            $view_file     = $this->__get_view_filename($controller, $action, $view_path);\n            $view_exists   = $this->view_file_exists($view_file);\n            $action_exists = method_exists($this, $action);\n\n            ob_start();\n\n            Log::add('controller', 'Controller: ' . $controller);\n\n            if (! $action_exists and ! $view_exists) {\n                $this->http_status(404);\n            } else if ($action_exists) {\n                $this->pre_execute_action($action);\n                if (!$this->controller_action_visible($action)) {\n                    $this->execute_404();\n                    exit;\n                }\n                Log::add('controller', 'Action: ' . $action);\n                $this->$action();\n            } else {\n                Log::add('controller', 'Action: NONE', Log::WARNING);\n            }\n\n            if ($this->_http_status == 404) {\n                ob_clean();\n                $this->execute_404();\n            } else {\n                Log::start_timer('view');\n\n                if ($this->view || $this->view_file) {\n                    if ($this->view_file) $view_file = $this->view_file;\n                    else $view_file = \"$view_path/{$this->view}.php\";\n\n                    $view_exists = $this->view_file_exists($view_file);\n                    if (! $view_exists) {\n                        throw new Exception(\n                            \"View file [{$view_file}] specified but not found\"\n                        );\n                    }\n                }\n\n                if (! $this->disable_mobile_views) {\n\n                    // Setup mobile view overrides\n                    if ($this->request->is_mobile_handset()) {\n                        $mobile_dir = 'mobile_handset';\n                        $mobile_layout =  'mh_standard';\n                        $override_reason = 'is_mobile_handset';\n                    }\n\n                    if (isset($mobile_layout)) {\n                        if ($this->mobile_view_file) {\n                            $mobile_view_file = $this->mobile_view_file;\n                        } else {\n                            $mobile_view = (!$this->mobile_view) ? $controller : $this->mobile_view;\n                            $mobile_view_file= \"$view_path/$mobile_view/$mobile_dir/$action.php\";\n                        }\n                        $pretty_mobile_view_file = str_replace($view_path, '', $mobile_view_file);\n\n                        if ($this->view_file_exists($mobile_view_file)) {\n                            $this->layout = $mobile_dir . '/'. $mobile_layout;\n                            $view_exists  = true;\n                            $view_file    = $mobile_view_file;\n                            Log::add('controller', \"View file overridden to $pretty_mobile_view_file by $override_reason\", Log::INFORMATION);\n                        } else {\n                            Log::add('controller', \"Attempted to override view by $override_reason but file $pretty_mobile_view_file could not be found\", Log::WARNING);\n                        }\n                    }\n                }\n\n                // This should always be right before the actual call to $this->render,\n                // so that any of the view variants above can get a sub-view applied\n                if ($this->sub_view) {\n                    $sub_view_file = str_replace('.php', \"_{$this->sub_view}.php\", $view_file);\n\n                    if ($this->view_file_exists($sub_view_file)) {\n                        $view_exists = true;\n                        $view_file = $sub_view_file;\n                    } else {\n                        Log::warn('controller', \"Sub-view {$this->sub_view} specified, but  [$sub_view_file] file could not be found\");\n                    }\n                }\n\n                if ($view_exists) {\n                    $base_len = strlen($view_path);\n                    if (substr($view_file, 0, $base_len) == $view_path) {\n                        $pretty_view = substr($view_file, $base_len + 1);\n                    } else {\n                        $pretty_view = $view_file;\n                    }\n                    Log::add('controller', 'View: ' . $pretty_view);\n                    $this->render($view_file);\n                } else {\n                    Log::add('controller', \"View: NONE [$view_file]\", Log::WARNING);\n                    if ($this->layout) {\n                        Indefatigable::super_tick('no_viewfile', array('controller' => $controller, 'action' => $action));                        \n                    }\n                }\n\n                Log::stop_timer('view');\n            }\n\n            $this->content_for_layout = ob_get_contents();\n            ob_end_clean();\n\n            if ($this->layout || $this->layout_file) {\n                Log::start_timer('layout');\n\n                if (method_exists($this, '__get_layout_filename')) {\n                    $layout_file = $this->__get_layout_filename();\n                } else {\n                    $layout_file = (\n                        $this->layout_file ? $this->layout_file :\n                        $view_path . '/layouts/' . $this->layout . '.php'\n                    );\n                }\n                if (! $this->view_file_exists($layout_file)) {\n                    throw new Exception(\"Layout file [{$layout_file}] not found.\");\n                }\n\n                ob_start();\n                $this->render($layout_file);\n                $output = ob_get_contents();\n\n                // show log covers the staff and dev reqs\n                if ($this->should_show_log() && $this->request->get('debug')) {\n                    $profiler = Profiler::getInstance();\n                    // newer bottom debug bar\n                    if ($profiler->isEnabled() && Config::is_dev()) {\n                        $output = $profiler->injectToken($output);\n                        $output = $profiler->injectScripts($output);\n                    }\n                    // older top corner debug\n                    $output .= Log::render_html(true, true);\n                }\n\n                ob_end_clean();\n\n                Log::stop_timer('layout');\n\n                return $output;\n            } else {\n                return $this->content_for_layout;\n            }\n        }\n\n        public function should_show_log()\n        {\n            if (!Dood::when('show_log')) {\n                return false;\n            } else if ($this->user && $this->user->is_staff && $this->request->get('debug')) {\n                return true;\n            } else if ($this->show_log && Config::is_dev()) {\n                return true;\n            }\n\n            return false;\n        }\n\n        public function set_layout($layout) { $this->layout = $layout; }\n\n        # Used to include a file w/ object variables and w/o local variables\n        public function render($file) {\n            $path = ViewRenderer::process_include($file);\n            include($path);\n        }\n\n        static function get_calling_controller()\n    \t{\n    \t    if (self::$current_controller) return self::$current_controller;\n\n    \t    // Warning: deprecated method here:\n    \t    // Doesn't work in some new versions of PHP\n    \t    foreach (debug_backtrace() as $frame)\n    \t        if (isset($frame[\"object\"]) && $frame[\"object\"] instanceof Controller)\n    \t            return $frame[\"object\"];\n    \t}\n\n        /**\n         * Begins capturing output content into a slot variable\n         *\n         * @param  string $name  Key used to store slot\n         * @param  mixed $value optional Value to store in slot, skips output buffering\n         */\n        public function slot($name, $value = null)\n        {\n            Log::add('controller', 'Set slot: ' . $name);\n            if (!is_null($value)) {\n                $this->slots[$name] = $value;\n            } else {\n                $this->slot_stack[] = $name;\n                ob_start();\n                ob_implicit_flush(false);\n            }\n        }\n\n        /**\n         * Ends capturing content of current slot and stores content in slot variable\n         */\n        public function end_slot()\n        {\n            $name = array_pop($this->slot_stack);\n            if (is_null($name)) {\n                return;\n            }\n            $content = ob_get_clean();\n            $this->slots[$name] = $content;\n        }\n\n        public function append_slot($name, $value = null) {\n            if (!isset($this->slots[$name])) {\n                $this->slots[$name] = '';\n            }\n\n            Log::add('controller', 'Appended to slot: ' . $name);\n            if (!is_null($value)) {\n                $this->slots[$name] .= $value;\n            } else {\n                $this->slot_stack[] = $name;\n                ob_start();\n                ob_implicit_flush(false);\n            }\n        }\n\n        public function end_append_slot($opts = array()) {\n            $name = array_pop($this->slot_stack);\n            if (is_null($name)) {\n                return;\n            }\n\n            $content = ob_get_clean();\n\n            if (Environment::getInstance()->isDev()) {\n\n                // Add a comment saying where the code was rendered if\n                // run in development mode\n\n                if (isset($opts['comment_format'])) {\n                    switch ($opts['comment_format']) {\n                        case 'html':\n                            $opts['comment_prefix'] = '<!--';\n                            $opts['comment_postfix'] = '-->';\n                            break;\n                        case 'js':\n                        case 'javascript':\n                            $opts['comment_prefix'] = '//';\n                            break;\n                        case 'css':\n                            $opts['comment_prefix'] = '/*';\n                            $opts['comment_postfix'] = '*/';\n                            break;\n                    }\n                }\n\n                if (isset($opts['comment_prefix'])) {\n                    $backtrace = debug_backtrace();\n                    $caller = $backtrace[ifx($opts,'stacktrace_position',0)];\n                    $comment = $caller['file'].':'.$caller['line'];\n                    $comment = str_replace(APP_PATH,'',$comment);\n                    $comment = str_replace('/tmp/compiled-views', 'app/views', $comment);\n                    $comment = str_replace('/var/www/apps/tumblr', 'app/views', $comment);\n\n                    $this->slots[$name] .= $opts['comment_prefix'].$comment;\n\n                    if (isset($opts['comment_postfix'])) {\n                        $this->slots[$name] .= $opts['comment_postfix'];\n                    }\n\n                    $this->slots[$name] .= \"\\n\";\n                }\n            }\n\n            $this->slots[$name] .= $content;\n        }\n\n        /**\n         * Returns whether a slot has been defined\n         *\n         * @param  string  $name Key used to store slot\n         * @return boolean       Whether the slot has been defined\n         */\n        public function has_slot($name)\n        {\n            return isset($this->slots[$name]);\n        }\n\n        /**\n         * Gets the content of a slot (does not check for existence)\n         *\n         * @param  string $name     Key used to store slot\n         * @return mixed        The content of the slot\n         */\n        public function get_slot($name)\n        {\n            if (isset($this->slots[$name])) {\n                return $this->slots[$name];\n            } else {\n                return null;\n            }\n        }\n\n        /**\n         * Unsets a previously set slot\n         *\n         * @param  string $name Key used to store slot\n         */\n        public function clear_slot($name)\n        {\n            unset($this->slots[$name]);\n        }\n\n        /**\n         * Given a class inheritance structure if given a static variable\n         * name will merge the values of all the arrays up the inheritance tree\n         *\n         * class Animal {\n         *   static $foo = array(1,2,3);\n         * }\n         *\n         * class Dog extends Animal {\n         *   static $foo = array(11,12,13);\n         * }\n         *\n         * class Corgi extends Dog {\n         *   static $foo = array(21,22,23);\n         * }\n         *\n         * new Animal()->_build_array_from_controller_tree('foo')\n         * //=> array(21,22,23,11,12,13,1,2,3)\n         *\n         * @param  String $varname name of variable to pull from each class\n         * @return Array           merged array\n         */\n        protected function _build_array_from_controller_tree($varname) {\n            $array = array();\n            $current_class = get_class($this);\n            while ($current_class) {\n                $parent_class = get_parent_class($current_class);\n\n                // If the value is inherited ignore it and move on to parent;\n                if ($parent_class && isset($parent_class::$$varname) && isset($current_class::$$varname) && $current_class::$$varname === $parent_class::$$varname) {\n                    $current_class = $parent_class;\n                    continue;\n                }\n\n                if (isset($current_class::$$varname) && is_array($current_class::$$varname)) {\n                    // array_unique at every run is used to preserve ordering\n                    $array = array_unique(array_merge($array, $current_class::$$varname));\n                }\n\n                $current_class = $parent_class;\n            }\n\n            return $array;\n        }\n\n        protected function define_tumblr_locale() {\n            if (defined('LANGUAGE')) {\n                return;\n            }\n\n            $app_locale = $this->resolve_tumblr_locale();\n\n            // Set the language in stone\n            define('LANGUAGE', $app_locale);\n            set_app_locale(LANGUAGE);\n        }\n\n        private function resolve_tumblr_locale()\n        {\n            $action = $this->request->GET('action');\n            $controller = $this->request->GET('controller');\n            $language_get = $this->request->GET('language', null, HttpRequest::PARAM_STRING);\n            $language_post = $this->request->POST('language', null, HttpRequest::PARAM_STRING);\n            $language_cookie = get_language_cookie(false);\n\n            if ($controller == 'tumblelog' && !empty($this->tumblelog)) {\n                $app_locale = $this->tumblelog->language;\n            } else if ($action == 'render_demo_theme' && $language_post) {\n                $app_locale = $language_post;\n            } else if ($language_get) {\n                $app_locale = $language_get;\n            } else if (!empty($this->user)) {\n                $app_locale = $this->user->language;\n            } else if ($language_cookie) {\n                $app_locale = $language_cookie;\n            } else if ($action == 'submit_form') {\n                $app_locale = Tumblelog()->find_by_url($this->request->GET('tumblelog_url'))->language;\n            } else {\n                $app_locale = tumblr_locale_for_browser();\n            }\n\n            // This protects against bogus cookies or tumblelog/user language settings\n            if (!is_tumblr_locale($app_locale)) {\n                $app_locale = DEFAULT_LOCALE;\n            }\n\n            return $app_locale;\n        }\n    }\n","markers":{"markers":{"1":{"id":1,"range":[[57,0],[57,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":102,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"6":{"id":6,"range":[[55,11],[55,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"23":{"id":23,"range":[[52,54],[52,54]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/ssun/Projects/tumblr/tumblr/chorus/Controller.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4048f75f0a7e70ada254b4d2c783f7dff77ccf03","deserializer":"TextBuffer"},{"text":"<?php\n\nrequire_once 'chorus/Script.php';\nrequire_once 'lib/Environment.php';\nuse Tumblr\\Command\\ConsoleCommand;\nuse Tumblr\\Command\\Input\\ArrayInput;\nrequire_once 'chorus/Utils.php';\nrequire_once 'lib/helpers.php';\nrequire_once 'vendor/assetic/require.php';\nrequire_once 'vendor/assetic/src/Assetic/Asset/StringAsset.php';\n\nuse Assetic\\Filter\\Yui\\JsCompressorFilter;\nuse Assetic\\Asset\\StringAsset;\n\nclass AssetStringCommand extends ConsoleCommand\n{\n    public function setup()\n    {\n        parent::setup();\n\n        $this->description = \"Compile js string files.\";\n    }\n\n    public function run($input, $output)\n    {\n        $translator = Translator::get_instance();\n        $compressor = new JSCompressorFilter(BASE_PATH . '/lib/yuicompressor-2.4.7.jar');\n\n        $output->writeln('Javascript Strings');\n\n        $compiled_files = array(\n            WWW_PATH . \"/languages/errors.js\",\n            WWW_PATH . \"/platform/v1/follow_button.js\",\n            WWW_PATH . \"/languages/tumblelog_iframe.js\",\n        );\n\n        foreach ($translator->get_languages() as $lang_code => $lang) {\n            $compiled_files[] = WWW_PATH . \"/languages/strings/$lang_code.js\";\n            $compiled_files[] = WWW_PATH . \"/languages/strings_iphone/$lang_code.js\";\n        }\n        \n        foreach ($compiled_files as $path) {\n            $language = pathinfo($path, PATHINFO_FILENAME);\n            \n            if ($language == 'errors') {\n                ob_start();\n                include(COMPILED_VIEWS_PATH . '/main/js_strings_errors.php');\n                $content = ob_get_contents();\n                ob_end_clean();\n            } else if ($language == 'follow_button') {\n                ob_start();\n                include(COMPILED_VIEWS_PATH . '/main/js_strings_follow_button.php');\n                $content = ob_get_contents();\n                ob_end_clean();\n            } else if ($language == 'tumblelog_iframe') {\n                ob_start();\n                include(COMPILED_VIEWS_PATH . '/main/js_strings_tumblelog_iframe.php');\n                $content = ob_get_contents();\n                ob_end_clean();\n            } else {\n                set_app_locale($language);\n                \n                ob_start();\n                include(COMPILED_VIEWS_PATH . '/main/js_strings' . (contains($path, 'strings_iphone') ? '_iphone_dashboard' : '') . '.php');\n                $content = ob_get_contents();\n                ob_end_clean();\n            }\n            $asset = new StringAsset($content, array($compressor));\n            \n            $output->writeln(\"Compiling \" . $path, 'success');\n            file_put_contents($path, $asset->dump());\n        }\n    }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[13,0],[13,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":162,"goalBufferRange":null,"autoscroll":true},"deserializer":"Marker"},"32":{"id":32,"range":[[13,0],[13,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/ssun/Projects/tumblr/tumblr/app/scripts/Command/AssetStringCommand.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b8c68c7d510da430a70ad8d3a21a41516f933181","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":102,"softTabs":true,"displayBuffer":{"id":103,"softWrapped":false,"editorWidthInChars":null,"scrollTop":214,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ssun/Projects/tumblr/tumblr/chorus/Controller.php","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":162,"softTabs":true,"displayBuffer":{"id":163,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ssun/Projects/tumblr/tumblr/app/scripts/Command/AssetStringCommand.php","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":48,"softTabs":true,"displayBuffer":{"id":49,"softWrapped":false,"editorWidthInChars":null,"scrollTop":931,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ssun/Projects/tumblr/tumblr/www/analytics.html","tabLength":2,"invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemUri":"/Users/ssun/Projects/tumblr/tumblr/app/scripts/Command/AssetStringCommand.php","focused":true,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-php","language-html","language-javascript","language-sql","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/ssun/Projects/tumblr/tumblr/chorus/Controller.php":1415654373294,"/Users/ssun/Projects/tumblr/tumblr/app/scripts/Command/AssetStringCommand.php":1415654374755,"/Users/ssun/Projects/tumblr/tumblr/www/analytics.html":1415142000877},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":3293250},"tree-view":{"directoryExpansionStates":{"app":{"views":{"main":{}}},"client":{"docs":{"app":{"context":{}}}},"languages":{"de_DE.utf8":{}},"log":{}},"selectedPath":"/Users/ssun/Projects/tumblr/tumblr/src","hasFocus":false,"attached":true,"scrollLeft":1,"scrollTop":551,"width":200},"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["quant","comsco","gaq","quan","_qevent","quant","qevent","qc","panel_admin","tick","tick_com","comscore","noscript","_comscore","lady","log","lady","comscore","go_log","splittest","bucket","scheduled_post_id","queue","errors.js","js_strings_errors"],"replaceHistory":[],"pathsHistory":[]},"sublime-tabs":{"directoryExpansionStates":{},"selectedPath":"/Users/ssun/Projects/tumblr/tumblr/app","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":194}}}