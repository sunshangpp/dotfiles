{"mode":"editor","version":1,"windowDimensions":{"x":4,"y":22,"width":1276,"height":778,"maximized":false},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/ssun/Projects/tumblr/search","buffers":[{"text":"#!/bin/bash\n#\n# Tumblr Search init script\n#\n\nMY_NAME=\"${0##*/}\"\nAPP_NAME=\"${MY_NAME%.sh}\" # set APP_NAME to the name this script was called from without the '.sh'\n\n# default service settings\nAPP_HOME=\"/usr/local/$APP_NAME/current\"\nCONF_HOME=$APP_HOME/conf\nSCRIPTS_HOME=$APP_HOME/scripts\nCONFIG_FILE=\"$SCRIPTS_HOME/$APP_NAME.sysconfig\"\n\n\n## Default Environment Context Settings\nAPP_LOG_DIR=/var/log/$APP_NAME\nAPP_RUN_DIR=/var/run/$APP_NAME\n\n# default daemon settings\nAPP_PIDFILE=\"$APP_RUN_DIR/$APP_NAME.pid\"\nDAEMON=/usr/local/bin/daemon\nDAEMON_PIDFILE=\"$APP_RUN_DIR/$APP_NAME-daemon.pid\"\nDAEMON_ARGS=\"--name $APP_NAME --pidfile $DAEMON_PIDFILE --core -U --chdir /\"\n# clean up stdout log\n#rm $APP_LOG_DIR/log\nDAEMON_START_ARGS=\"--stdout=$APP_LOG_DIR/log --stderr=$APP_LOG_DIR/error\"\nSTAGE=production # Can be overloaded in sysconfig file\n\n# default timeouts\nSTARTUP_TIMEOUT=60\nSHUTDOWN_TIMEOUT=60\nKILL_TIMEOUT=30\n\n## Default JVM Settings\n\n### JMX settings\nJMX_ENABLED=true\nJMX_PORT=3333\n\n### Heap settings\nHEAP_SIZE_GB=4\nHEAP_OPTS_EXTRA=\n\n### GC settings\nGC_OPTS=\nGC_LOG_ENABLED=false\n\n### LOG ops\nLOG_OPTS=\n\n### Classpath\nLIB_HOME=$APP_HOME/lib\nCLASSPATH=\"$LIB_HOME/*\"\n\nDEBUG_OPTS=\n\nJAVA_OPTS_EXTRA=\nAPP_ARGS=\n\nfunction configure_java {\n\n    HEAP_OPTS=\"-Xmx${HEAP_SIZE_GB}g ${HEAP_OPTS_EXTRA}\"\n    JAVA_OPTS=\"-classpath \\\"$CLASSPATH\\\" $HEAP_OPTS $GC_OPTS $LOG_OPTS\"\n\n    if $JMX_ENABLED \n    then\n        JMX_OPTS=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=$JMX_PORT -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false\"\n        JAVA_OPTS+=\" $JMX_OPTS\"\n    fi\n\n    if $GC_LOG_ENABLED\n    then\n        GC_LOG_OPTS=\"-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC\"\n        GC_LOG=\"-Xloggc:/var/log/$APP_NAME/gc.log\"        \n        JAVA_OPTS+=\" $GC_LOG_OPTS $GC_LOG\"\n    fi    \n\n    if [[ ! -z $DEBUG_OPTS ]]\n    then\n        JAVA_OPTS+=\" $DEBUG_OPTS\"\n    fi\n    \n    if [[ -z $MAIN_CLASS ]] \n    then\n        die \"Unabled to find $MAIN_CLASS\"\n    fi\n\n    JAVA_ARGS=\"${JAVA_OPTS_EXTRA} ${MAIN_CLASS} ${APP_ARGS}\"\n}\n\n# app log dir. create if not existed\nif [[ ! -d $APP_LOG_DIR ]]\nthen\n    mkdir -p $APP_LOG_DIR\n    if [[ ! -d $APP_LOG_DIR ]]\n    then\n        die \"failed to create $APP_LOG_DIR. exit\"\n    fi\nfi\n\n# app run dir. create if not existed\nif [[ ! -d $APP_RUN_DIR ]]\nthen\n    mkdir -p $APP_RUN_DIR\n    if [[ ! -d $APP_RUN_DIR ]]\n    then\n        die \"failed to create $APP_RUN_DIR. exit\"\n    fi\nfi\n\n# No Mr Bond, I expect you to die\nfunction die {\n    local _MESSAGE=\"$1\"\n    printf 'FAIL\\n'\n    printf 'DEBUG: %s\\n' \"$_MESSAGE\"\n    exit 1\n}\n\nfunction configure_instance {\n    if [[ -e $CONFIG_FILE ]]\n    then\n        source \"$CONFIG_FILE\"\n    else\n        die \"No config file found (I tried $CONFIG_FILE)\"\n    fi\n}\n\nfunction get_data_center {\n    local _DATA_CENTER\n    if _DATA_CENTER=\"$(cat /var/db/datacenter 2>/dev/null)\"\n    then\n        printf '%s' $_DATA_CENTER\n    else\n        die \"Unable to read /var/db/datacenter, cannot determine data center name\"\n    fi\n}\n\nfunction is_running {\n    if $DAEMON $DAEMON_ARGS --running\n    then\n        return 0\n    else\n        # is the service running in spite of what daemon says?\n        if [[ -r $APP_PIDFILE ]]\n        then\n            # all current pids exist in /proc as directories\n            if [[ -d /proc/$(cat $APP_PIDFILE) ]]\n            then\n                return 0\n            else\n                # stale pidfile, remove it\n                rm -f \"$APP_PIDFILE\"\n            fi\n        fi\n        return 1\n    fi\n}\n\n\nfunction startup_timer {\n    local _TIMEOUT=$1\n    # wait for startup or timeout\n    for (( t=1; t <= _TIMEOUT; t++ ))\n    do\n        if is_running\n        then\n            return 0\n        else\n            sleep 1\n        fi\n    done\n    # time's up\n    return 1\n}\n\n\nfunction shutdown_timer {\n    local _TIMEOUT=$1\n    # wait for shutdown or timeout\n    for (( t=1; t <= _TIMEOUT; t++ ))\n    do\n        if ! is_running\n        then\n            return 0\n        else\n            sleep 1\n        fi\n    done\n    # time's up\n    return 1\n}\n\n\nfunction start {\n    printf 'Starting %s: ' \"$APP_NAME\"\n\n    # preflight checks\n    #if [[ ! -r $APP_HOME/$JAR_NAME ]] # is there a jar?\n    #then\n    #  die \"$APP_HOME/$JAR_NAME cannot be read or does not exist\"\n    #fi\n\n    if [[ ! -x $JAVA_HOME/bin/java ]] # can the jar be opened?\n    then\n        die \"no java found (I tried $JAVA_HOME/bin/java)\"\n    fi\n\n    if is_running\n    then\n        printf 'FAIL\\n'\n        printf '%s is already running\\n' \"$APP_NAME\"\n        return 0 # FIX ME: The linux init system standard says this should be a failure case.\n    fi\n\n    ulimit -c unlimited || printf '(no coredump)'\n    #ulimit -n $MAX_OPEN_FILES\n    # fire it up\n    $DAEMON $DAEMON_ARGS $DAEMON_START_ARGS -- sh -c \"echo \"'$$'\" > $APP_PIDFILE; exec $JAVA_HOME/bin/java $JAVA_OPTS $JAVA_ARGS\"\n    if startup_timer $STARTUP_TIMEOUT\n    then\n        printf 'OK\\n'\n        return 0\n    else\n        printf 'FAIL\\n'\n        return 1\n    fi\n}\n\n\nfunction stop {\n    printf 'Stopping %s: ' \"$APP_NAME\"\n    if ! is_running\n    then\n        printf '%s is not running\\n' \"$APP_NAME\"\n        return 0 # FIX ME: The linux init system standard says this should be a failure case.\n    fi\n\n    if [[ -f $APP_PIDFILE ]]\n    then\n        kill -9 $(cat \"$APP_PIDFILE\")\n        # wait for hard shutdown timeout\n        if shutdown_timer $KILL_TIMEOUT\n        then\n            printf 'OK\\n'\n        else\n        # it didn't work, give up\n        printf 'FAIL\\n'\n        die \"giving up after $KILL_TIMEOUT seconds\"\n        fi\n    else\n        die \"pidfile file not found: $APP_PIDFILE\"\n    fi\n}\n\n\nfunction restart {\n    stop\n    start\n}\n\n\nfunction status {\n    if is_running\n    then\n        printf '%s is running with pid:%s\\n' \"$APP_NAME\" \"$(cat $APP_PIDFILE)\"\n        exit 0\n    else\n        printf '%s is stopped\\n' \"$APP_NAME\"\n        exit 1\n    fi\n}\n\nfunction set_stage {\n    if [[ -z $STAGE ]]\n    then\n        STAGE=production\n    fi\n}\n\nfunction set_java_home {\n    # if JAVA_HOME is undefined, try to find it\n    if [[ -z $JAVA_HOME ]]\n    then\n        for dir in /opt/jdk /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home /usr/java/default\n        do\n            if [[ -x $dir/bin/java ]]\n            then\n                JAVA_HOME=$dir\n                break\n            fi\n        done\n    fi\n}\n\n\nif [[ $# > 1 && $1 == \"-c\" ]]\nthen\n    shift\n    config=$1\n    if [[ ! -f $config ]]\n    then\n        die \"Cannot find config file: $config\"\n    fi\n    shift\n    CONFIG_FILE=$config\nfi\n\ncase $1 in\n    start|stop|restart|status)\n\tconfigure_instance\n\tset_stage\n\tset_java_home\n    configure_java\n        $1\n        ;;\n    *)\n        printf 'Usage: %s {start|stop|status|restart}\\n' \"$APP_NAME\"\n        exit 2\n        ;;\nesac\n","markers":{"markers":{"1":{"id":1,"range":[[9,27],[9,27]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":6,"goalBufferRange":null},"deserializer":"Marker"},"75":{"id":75,"range":[[9,27],[9,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/ssun/Projects/tumblr/search/packages/solr-servers/search-postserver/scripts/search-postserver.sh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"bb082f141d54520c46988784d12d9278a7f3d448","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":6,"softTabs":true,"displayBuffer":{"id":7,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ssun/Projects/tumblr/search/packages/solr-servers/search-postserver/scripts/search-postserver.sh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemUri":"/Users/ssun/Projects/tumblr/search/packages/solr-servers/search-postserver/scripts/search-postserver.sh","focused":false,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-shellscript","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["currency","curren","currenc","currency","curren","currenc","eleva","dict","dist","jetty","xml","jetty","HEAP_SIZE_GB","action \"starting","/var/solr","solr_home","/var/solr","solr","var","var/solr","var/log","var/solr","agowith","valuesource","MY_NAME"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/ssun/Projects/tumblr/search/packages/solr-servers/search-postserver/scripts/search-postserver.sh":1414434520607},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":35012664},"tree-view":{"directoryExpansionStates":{"packages":{"solr-servers":{}}},"selectedPath":"/Users/ssun/Projects/tumblr/search/packages/solr-servers/search-toppostserver","hasFocus":true,"attached":true,"scrollLeft":16,"scrollTop":94,"width":199},"sublime-tabs":{"directoryExpansionStates":{},"hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":198}}}