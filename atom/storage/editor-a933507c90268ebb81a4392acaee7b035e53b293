{"version":1,"windowDimensions":{"x":4,"y":23,"width":1276,"height":777,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/ssun/Projects/ruby_monkeypatch"],"buffers":[{"text":"class CallbackAbortError < StandardError; end\n\n# If you include CallbackHandler as a mix-in, it grants the base class support\n# for Jetpants callbacks, as defined here:\n#\n# If you invoke a method \"foo\", Jetpants will first\n# automatically call any \"before_foo\" methods that exist in the class or its\n# superclasses. You can even define multiple methods named before_foo (in the\n# same class!) and they will each be called. In other words, Jetpants\n# callbacks \"stack\" instead of overriding each other.\n#\n# After calling any/all before_foo methods, the foo method is called, followed\n# by all after_foo methods in the same manner.\n#\n# If any before_foo method raises a CallbackAbortError, subsequent before_foo\n# methods will NOT be called, NOR will foo itself nor any after_foo methods.\n#\n# If any after_foo method raises a CallbackAbortError, subsequent after_foo\n# methods will NOT be called.\n#\n# You may preceed the definition of a callback method with \"callback_priority 123\"\n# to set an explicit priority (higher = called first) for subsequent callbacks.\n# The default priority is 100.\nmodule CallbackHandler\n  def self.included(base)\n    base.class_eval do\n      class << self\n        # Set the priority (higher = called first) for any subsequent callbacks defined in the current class.\n        def callback_priority(value)\n          @callback_priority = value\n        end\n\n        def method_added(name)\n          # Intercept before_* and after_* methods and create corresponding Callback objects\n          if name.to_s.start_with? 'before_', 'after_'\n            Callback.new self, name.to_s.split('_', 2)[1].to_sym, name.to_s.split('_', 2)[0].to_sym, @callback_priority\n\n          # Intercept redefinitions of methods we've already wrapped, so we can\n          # wrap them again\n          elsif Callback.wrapped? self, name\n            Callback.wrap_method self, name\n          end\n        end\n      end\n\n      # Default priority for callbacks is 100\n      @callback_priority = 100\n    end\n  end\nend\n\n# Generic representation of a before-method or after-method callback.\n# Used internally by CallbackHandler; you won't need to interact with Callback directly.\nclass Callback\n  @@all_callbacks = {}        # hash of class obj -> method_name symbol -> type string -> array of callbacks\n  @@currently_wrapping = {}   # hash of class obj -> method_name symbol -> bool\n\n  attr_reader :for_class    # class object\n  attr_reader :method_name  # symbol containing method name (the one being callback-wrapped)\n  attr_reader :type         # :before or :after\n  attr_reader :priority     # high numbers get triggered first\n  attr_reader :my_alias     # method name alias OF THE CALLBACK\n\n  def initialize(for_class, method_name, type=:after, priority=100)\n    @for_class = for_class\n    @method_name = method_name\n    @type = type\n    @priority = priority\n\n    @@all_callbacks[for_class] ||= {}\n    @@all_callbacks[for_class][method_name] ||= {}\n    already_wrapped = Callback.wrapped?(for_class, method_name)\n    @@all_callbacks[for_class][method_name][type] ||= []\n\n    next_method_id = @@all_callbacks[for_class][method_name][type].count + 1\n    old_name = \"#{type.to_s}_#{method_name.to_s}\".to_sym\n    @my_alias = new_name = (\"real_callback_#{old_name}_\" + for_class.to_s.sub('::', '_') + \"_#{next_method_id}\").to_sym\n    for_class.class_eval do\n      alias_method new_name, old_name\n    end\n    Callback.wrap_method(for_class, method_name) unless already_wrapped\n\n    @@all_callbacks[for_class][method_name][type] << self\n  end\n\n  def self.wrap_method(for_class, method_name)\n    @@currently_wrapping[for_class] ||= {}\n    @@currently_wrapping[for_class][method_name] ||= false\n    return if @@currently_wrapping[for_class][method_name] # prevent infinite recursion from the alias_method call\n    @@currently_wrapping[for_class][method_name] = true\n\n    for_class.class_eval do\n      alias_method \"#{method_name}_without_callbacks\".to_sym, method_name\n      define_method method_name do |*args|\n        begin\n          Callback.trigger(self, method_name, :before, *args)\n        rescue CallbackAbortError\n          return\n        end\n        result = send \"#{method_name}_without_callbacks\".to_sym, *args\n        begin\n          Callback.trigger(self, method_name, :after, *args)\n        rescue CallbackAbortError\n        end\n        result\n      end\n    end\n\n    @@currently_wrapping[for_class][method_name] = false\n  end\n\n  def self.trigger(for_object, method_name, type, *args)\n    my_callbacks = []\n    for_object.class.ancestors.each do |for_class|\n      if @@all_callbacks[for_class] && @@all_callbacks[for_class][method_name] && @@all_callbacks[for_class][method_name][type]\n        my_callbacks.concat(@@all_callbacks[for_class][method_name][type])\n      end\n    end\n    my_callbacks.sort_by! {|c| -1 * c.priority}\n    my_callbacks.each {|c| for_object.send(c.my_alias, *args)}\n  end\n\n  def self.wrapped?(for_class, method_name)\n    return false unless @@all_callbacks[for_class] && @@all_callbacks[for_class][method_name]\n    @@all_callbacks[for_class][method_name].count > 0\n  end\nend\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":261,"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":127,"column":0},"end":{"row":127,"column":0}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2}},"nextMarkerLayerId":3,"history":{"version":3,"nextCheckpointId":28,"undoStack":[{"type":"checkpoint","id":1,"snapshot":{"2":{"2-0":{"range":[[119,0],[119,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false}],"redoStack":[{"type":"group-end","snapshot":{"2":{"2-0":{"range":[[120,3],[120,3]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[120,2],[120,2]],"newRange":[[120,2],[120,3]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[120,1],[120,1]],"newRange":[[120,1],[120,2]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[120,0],[120,0]],"newRange":[[120,0],[120,1]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[120,0],[120,1]],"newRange":[[120,0],[120,0]],"oldText":"M","newText":""}},{"type":"change","content":{"oldRange":[[120,1],[120,2]],"newRange":[[120,1],[120,1]],"oldText":"a","newText":""}},{"type":"change","content":{"oldRange":[[120,2],[120,3]],"newRange":[[120,2],[120,2]],"oldText":"k","newText":""}},{"type":"change","content":{"oldRange":[[120,3],[120,4]],"newRange":[[120,3],[120,3]],"oldText":"e","newText":""}},{"type":"change","content":{"oldRange":[[120,4],[120,5]],"newRange":[[120,4],[120,4]],"oldText":"f","newText":""}},{"type":"change","content":{"oldRange":[[120,5],[120,6]],"newRange":[[120,5],[120,5]],"oldText":"i","newText":""}},{"type":"change","content":{"oldRange":[[120,6],[120,7]],"newRange":[[120,6],[120,6]],"oldText":"l","newText":""}},{"type":"change","content":{"oldRange":[[120,7],[120,8]],"newRange":[[120,7],[120,7]],"oldText":"e","newText":""}},{"type":"change","content":{"oldRange":[[120,0],[120,6]],"newRange":[[120,0],[120,8]],"oldText":"      ","newText":"Makefile"}},{"type":"change","content":{"oldRange":[[120,5],[120,5]],"newRange":[[120,5],[120,6]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[120,4],[120,4]],"newRange":[[120,4],[120,5]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[120,0],[120,0]],"newRange":[[120,0],[120,4]],"oldText":"","newText":"    "}},{"type":"change","content":{"oldRange":[[119,62],[119,62]],"newRange":[[119,62],[120,0]],"oldText":"","newText":"\n"}},{"type":"group-start","snapshot":{"2":{"2-0":{"range":[[119,0],[119,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}]},"encoding":"utf8","filePath":"/Users/ssun/Projects/ruby_monkeypatch/callback.rb","digestWhenLastPersisted":"4f603d3606d1be5fa01d3518c1df600c1c6acdea","preferredLineEnding":null,"deserializer":"TextBuffer","version":4},{"text":"class Hash\n  def deep_lookup key\n    if key? key\n      fetch key\n    else\n      values.select do |child|\n        child.is_a? Hash\n      end.map do |child|\n        child.deep_lookup key\n      end.compact.first\n    end\n  end\nend\n\nclass Hash\n  def deep_lookup key\n    if key? key\n      fetch key\n    else\n      values.select do |child|\n        child.is_a? Hash\n      end.map do |child|\n        child.deep_lookup key\n      end.compact.first\n    end\n  end\nend\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":33,"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":27,"column":0},"end":{"row":27,"column":0}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2}},"nextMarkerLayerId":3,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/ssun/Projects/ruby_monkeypatch/hash.rb","digestWhenLastPersisted":"f473df74b16793156f08f1ee874192cf8609f4d9","preferredLineEnding":null,"deserializer":"TextBuffer","version":4},{"text":"all: stuff\n\nprint stuff:\n\techo wowow this is nutsZ\n\ncrazy:\n\techo well its easy enough\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":73,"id":"0","maintainHistory":false,"markersById":{"0-71":{"range":{"start":{"row":7,"column":0},"end":{"row":7,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"0-72":{"range":{"start":{"row":7,"column":0},"end":{"row":7,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":7,"column":0},"end":{"row":7,"column":0}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2}},"nextMarkerLayerId":3,"history":{"version":3,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/ssun/Projects/ruby_monkeypatch/Makefile","digestWhenLastPersisted":"246699b4ee720a11d99bda206da0862f315c50cc","preferredLineEnding":null,"deserializer":"TextBuffer","version":4}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":true,"firstVisibleScreenRow":90,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/ssun/Projects/ruby_monkeypatch/callback.rb","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":8,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":9,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/ssun/Projects/ruby_monkeypatch/hash.rb","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":12,"softTabs":false,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":13,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/ssun/Projects/ruby_monkeypatch/Makefile","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/ssun/Projects/ruby_monkeypatch/Makefile","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-ruby","language-make","language-shellscript","language-hyperlink","language-todo"],"destroyedItemURIs":["atom://config"]},"packageStates":{"linter":{"scope":"File"},"fuzzy-finder":{"/Users/ssun/Projects/ruby_monkeypatch/callback.rb":1450053016644,"/Users/ssun/Projects/ruby_monkeypatch/hash.rb":1450053070551,"/Users/ssun/Projects/ruby_monkeypatch/Makefile":1450061732931},"keybinding-resolver":{},"metrics":{"sessionLength":18088},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/ssun/Projects/ruby_monkeypatch":{"isExpanded":true,"entries":{}}},"selectedPath":"/Users/ssun/Projects/ruby_monkeypatch/Makefile","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}},"fullScreen":false}