{"mode":"editor","version":1,"windowDimensions":{"x":173,"y":35,"width":1024,"height":778},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/ssun/Projects/FunctionalProgramming/Week3","buffers":[{"text":"package objsets\n\nimport org.scalatest.FunSuite\n\nimport org.junit.runner.RunWith\nimport org.scalatest.junit.JUnitRunner\n\n@RunWith(classOf[JUnitRunner])\nclass TweetSetSuite extends FunSuite {\n  trait TestSets {\n    val set1 = new Empty\n    val set2 = set1.incl(new Tweet(\"a\", \"a body\", 20))\n    val set3 = set2.incl(new Tweet(\"b\", \"b body\", 20))\n    val c = new Tweet(\"c\", \"c body\", 7)\n    val d = new Tweet(\"d\", \"d body\", 9)\n    val set4c = set3.incl(c)\n    val set4d = set3.incl(d)\n    val set5 = set4c.incl(d)\n  }\n\n  def asSet(tweets: TweetSet): Set[Tweet] = {\n    var res = Set[Tweet]()\n    tweets.foreach(res += _)\n    res\n  }\n\n  def size(set: TweetSet): Int = asSet(set).size\n\n  test(\"filter: on empty set\") {\n    new TestSets {\n      assert(size(set1.filter(tw => tw.user == \"a\")) === 0)\n    }\n  }\n\n  test(\"filter: a on set5\") {\n    new TestSets {\n      assert(size(set5.filter(tw => tw.user == \"a\")) === 1)\n    }\n  }\n\n  test(\"filter: 20 on set5\") {\n    new TestSets {\n      assert(size(set5.filter(tw => tw.retweets == 20)) === 2)\n    }\n  }\n\n  test(\"union: set4c and set4d\") {\n    new TestSets {\n      assert(size(set4c.union(set4d)) === 4)\n    }\n  }\n\n  test(\"union: with empty set (1)\") {\n    new TestSets {\n      assert(size(set5.union(set1)) === 4)\n    }\n  }\n\n  test(\"union: with empty set (2)\") {\n    new TestSets {\n      assert(size(set1.union(set5)) === 4)\n    }\n  }\n\n  test(\"descending: set5\") {\n    new TestSets {\n      val trends = set5.descendingByRetweet\n      assert(!trends.isEmpty)\n      assert(trends.head.user == \"a\" || trends.head.user == \"b\")\n    }\n  }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[10,24],[10,24]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":21,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/ssun/Projects/FunctionalProgramming/Week3/src/test/scala/objsets/TweetSetSuite.scala","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"d0b6a45e2a11fc62eeec5b9db8595ac653e3ee45","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":21,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":22,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/Users/ssun/Projects/FunctionalProgramming/Week3/src/test/scala/objsets/TweetSetSuite.scala","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/ssun/Projects/FunctionalProgramming/Week3/src/test/scala/objsets/TweetSetSuite.scala","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/ssun/Projects/FunctionalProgramming/Week3/src/test/scala/objsets/TweetSetSuite.scala":1400966334608},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":27987},"tree-view":{"directoryExpansionStates":{"src":{"test":{"scala":{"objsets":{}}}},"target":{}},"selectedPath":"/Users/ssun/Projects/FunctionalProgramming/Week3/src/test/scala/objsets/TweetSetSuite.scala","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}