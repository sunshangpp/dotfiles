(function() {
  var Environment, Go, PathExpander, PathHelper, os, path, _;

  _ = require('underscore-plus');

  path = require('path');

  os = require('os');

  Go = require('./../lib/go');

  PathExpander = require('./../lib/util/pathexpander');

  PathHelper = require('./util/pathhelper');

  Environment = require('./../lib/environment');

  describe('go', function() {
    var env, environment, go, pathexpander, pathhelper, _ref;
    _ref = [], go = _ref[0], environment = _ref[1], pathexpander = _ref[2], pathhelper = _ref[3], env = _ref[4];
    beforeEach(function() {
      environment = new Environment(process.env);
      pathexpander = new PathExpander(environment.Clone());
      pathhelper = new PathHelper();
      return go = new Go('/usr/local/bin/go', pathexpander);
    });
    describe('when working with a single-item gopath', function() {
      beforeEach(function() {
        return go.gopath = pathhelper.home() + path.sep + 'go';
      });
      it('expands the path', function() {
        return runs(function() {
          var result;
          result = go.buildgopath();
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          return expect(result).toBe(path.join(pathhelper.home(), 'go'));
        });
      });
      return it('splits the path', function() {
        return runs(function() {
          var result;
          result = go.splitgopath();
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(_.size(result)).toBe(1);
          expect(result[0]).toBeDefined();
          return expect(result[0]).toBe(path.join(pathhelper.home(), 'go'));
        });
      });
    });
    return describe('when working with a multi-item gopath', function() {
      beforeEach(function() {
        return go.gopath = pathhelper.home() + path.sep + 'go' + path.delimiter + pathhelper.home() + path.sep + 'go2' + path.delimiter + path.sep + 'usr' + path.sep + 'local' + path.sep + 'go';
      });
      it('expands the path', function() {
        return runs(function() {
          var expected, prefix, result;
          prefix = os.platform() === 'win32' ? 'c:' : '';
          result = go.buildgopath();
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expected = path.join(pathhelper.home(), 'go') + path.delimiter + path.join(pathhelper.home(), 'go2') + path.delimiter + prefix + path.sep + 'usr' + path.sep + 'local' + path.sep + 'go';
          return expect(result.toLowerCase()).toBe(expected.toLowerCase());
        });
      });
      return it('splits the path', function() {
        return runs(function() {
          var expected, prefix, result;
          prefix = os.platform() === 'win32' ? 'c:' : '';
          result = go.splitgopath();
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(_.size(result)).toBe(3);
          expect(result[0]).toBeDefined();
          expect(result[0]).toBe(path.join(pathhelper.home(), 'go'));
          expect(result[1]).toBeDefined();
          expect(result[1]).toBe(path.join(pathhelper.home(), 'go2'));
          expect(result[2]).toBeDefined();
          expected = prefix + path.sep + path.join('usr', 'local', 'go');
          return expect(result[2].toLowerCase()).toBe(expected.toLowerCase());
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL3NzdW4vLmF0b20vcGFja2FnZXMvZ28tcGx1cy9zcGVjL2dvLXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLHNEQUFBOztBQUFBLEVBQUEsQ0FBQSxHQUFJLE9BQUEsQ0FBUSxpQkFBUixDQUFKLENBQUE7O0FBQUEsRUFDQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FEUCxDQUFBOztBQUFBLEVBRUEsRUFBQSxHQUFLLE9BQUEsQ0FBUSxJQUFSLENBRkwsQ0FBQTs7QUFBQSxFQUdBLEVBQUEsR0FBSyxPQUFBLENBQVEsYUFBUixDQUhMLENBQUE7O0FBQUEsRUFJQSxZQUFBLEdBQWUsT0FBQSxDQUFRLDRCQUFSLENBSmYsQ0FBQTs7QUFBQSxFQUtBLFVBQUEsR0FBYSxPQUFBLENBQVEsbUJBQVIsQ0FMYixDQUFBOztBQUFBLEVBTUEsV0FBQSxHQUFjLE9BQUEsQ0FBUSxzQkFBUixDQU5kLENBQUE7O0FBQUEsRUFRQSxRQUFBLENBQVMsSUFBVCxFQUFlLFNBQUEsR0FBQTtBQUNiLFFBQUEsb0RBQUE7QUFBQSxJQUFBLE9BQW1ELEVBQW5ELEVBQUMsWUFBRCxFQUFLLHFCQUFMLEVBQWtCLHNCQUFsQixFQUFnQyxvQkFBaEMsRUFBNEMsYUFBNUMsQ0FBQTtBQUFBLElBRUEsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUNULE1BQUEsV0FBQSxHQUFrQixJQUFBLFdBQUEsQ0FBWSxPQUFPLENBQUMsR0FBcEIsQ0FBbEIsQ0FBQTtBQUFBLE1BQ0EsWUFBQSxHQUFtQixJQUFBLFlBQUEsQ0FBYSxXQUFXLENBQUMsS0FBWixDQUFBLENBQWIsQ0FEbkIsQ0FBQTtBQUFBLE1BRUEsVUFBQSxHQUFpQixJQUFBLFVBQUEsQ0FBQSxDQUZqQixDQUFBO2FBR0EsRUFBQSxHQUFTLElBQUEsRUFBQSxDQUFHLG1CQUFI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

//# sourceURL=/Users/ssun/.atom/packages/go-plus/spec/go-spec.coffee
