(function() {
  var Environment, Executor, GoExecutable, GocoverParser, fs, os, path, temp, _;

  path = require('path');

  fs = require('fs-plus');

  temp = require('temp').track();

  os = require('os');

  _ = require('underscore-plus');

  GoExecutable = require('./../../lib/goexecutable');

  GocoverParser = require('./../../lib/gocover/gocover-parser');

  Environment = require('./../../lib/environment');

  Executor = require('./../../lib/executor');

  describe('gocover parser', function() {
    var directory, done, env, environment, executor, filePath, go, gocoverparser, goexecutable, testFilePath, _ref;
    _ref = [], done = _ref[0], gocoverparser = _ref[1], environment = _ref[2], executor = _ref[3], goexecutable = _ref[4], go = _ref[5], env = _ref[6], directory = _ref[7], filePath = _ref[8], testFilePath = _ref[9];
    beforeEach(function() {
      done = false;
      environment = new Environment(process.env);
      executor = new Executor(environment.Clone());
      gocoverparser = new GocoverParser();
      directory = temp.mkdirSync();
      env = _.clone(process.env);
      env['GOPATH'] = directory;
      goexecutable = new GoExecutable(env);
      filePath = path.join(directory, 'src', 'github.com', 'testuser', 'example', 'go-plus.go');
      testFilePath = path.join(directory, 'src', 'github.com', 'testuser', 'example', 'go-plus_test.go');
      fs.writeFileSync(filePath, 'package main\n\nimport "fmt"\n\nfunc main()  {\n\tfmt.Println(Hello())\n}\n\nfunc Hello() string {\n\treturn "Hello, 世界"\n}\n');
      fs.writeFileSync(testFilePath, 'package main\n\nimport "testing"\n\nfunc TestHello(t *testing.T) {\n\tresult := Hello()\n\tif result != "Hello, 世界" {\n\t\tt.Errorf("Expected %s - got %s", "Hello, 世界", result)\n\t}\n}');
      return waitsForPromise(function() {
        return goexecutable.detect().then(function(gos) {
          return go = goexecutable.current();
        });
      });
    });
    return it('parses the file for a single package correctly', function() {
      var args, cmd, cwd, tempDir, tempFile;
      done = false;
      cmd = go.executable;
      tempDir = temp.mkdirSync();
      tempFile = path.join(tempDir, 'coverage.out');
      args = ['test', "-coverprofile=" + tempFile];
      cwd = path.join(directory, 'src', 'github.com', 'testuser', 'example');
      done = function(exitcode, stdout, stderr, messages) {
        expect(exitcode).toBe(0);
        if (exitcode === 0) {
          gocoverparser.setDataFile(tempFile);
          return done = true;
        }
      };
      runs(function() {
        return executor.exec(cmd, cwd, env, done, args);
      });
      waitsFor(function() {
        return done === true;
      });
      return runs(function() {
        var packagePath, re, result, retext;
        retext = '^' + path.join(directory, 'src') + path.sep;
        if (os.platform() === 'win32') {
          retext = retext.replace(/\\/g, '\\\\');
        }
        re = new RegExp(retext);
        packagePath = filePath.replace(re, '');
        result = gocoverparser.rangesForFile(filePath);
        expect(result).toBeDefined();
        expect(_.size(result)).toBe(2);
        expect(result[0]).toBeDefined();
        expect(result[0].range.start).toBeDefined();
        expect(result[0].range.end).toBeDefined();
        expect(result[0].range.start.column).toBe(13);
        expect(result[0].range.start.row).toBe(4);
        expect(result[0].range.end.column).toBe(1);
        expect(result[0].range.end.row).toBe(6);
        expect(result[0].count).toBe(0);
        expect(result[0].file).toBe(packagePath);
        expect(result[1]).toBeDefined();
        expect(result[1].range.start).toBeDefined();
        expect(result[1].range.end).toBeDefined();
        expect(result[1].range.start.column).toBe(20);
        expect(result[1].range.start.row).toBe(8);
        expect(result[1].range.end.column).toBe(1);
        expect(result[1].range.end.row).toBe(10);
        expect(result[1].count).toBe(1);
        return expect(result[1].file).toBe(packagePath);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL3NzdW4vLmF0b20vcGFja2FnZXMvZ28tcGx1cy9zcGVjL2dvY292ZXIvZ29jb3Zlci1wYXJzZXItc3BlYy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEseUVBQUE7O0FBQUEsRUFBQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FBUCxDQUFBOztBQUFBLEVBQ0EsRUFBQSxHQUFLLE9BQUEsQ0FBUSxTQUFSLENBREwsQ0FBQTs7QUFBQSxFQUVBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQUFlLENBQUMsS0FBaEIsQ0FBQSxDQUZQLENBQUE7O0FBQUEsRUFHQSxFQUFBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FITCxDQUFBOztBQUFBLEVBSUEsQ0FBQSxHQUFJLE9BQUEsQ0FBUSxpQkFBUixDQUpKLENBQUE7O0FBQUEsRUFLQSxZQUFBLEdBQWUsT0FBQSxDQUFRLDBCQUFSLENBTGYsQ0FBQTs7QUFBQSxFQU1BLGFBQUEsR0FBZ0IsT0FBQSxDQUFRLG9DQUFSLENBTmhCLENBQUE7O0FBQUEsRUFPQSxXQUFBLEdBQWMsT0FBQSxDQUFRLHlCQUFSLENBUGQsQ0FBQTs7QUFBQSxFQVFBLFFBQUEsR0FBVyxPQUFBLENBQVEsc0JBQVIsQ0FSWCxDQUFBOztBQUFBLEVBVUEsUUFBQSxDQUFTLGdCQUFULEVBQTJCLFNBQUEsR0FBQTtBQUN6QixRQUFBLDBHQUFBO0FBQUEsSUFBQSxPQUF5RyxFQUF6RyxFQUFDLGNBQUQsRUFBTyx1QkFBUCxFQUFzQixxQkFBdEIsRUFBbUMsa0JBQW5DLEVBQTZDLHNCQUE3QyxFQUEyRCxZQUEzRCxFQUErRCxhQUEvRCxFQUFvRSxtQkFBcEUsRUFBK0Usa0JBQS9FLEVBQXlGLHNCQUF6RixDQUFBO0FBQUEsSUFFQSxVQUFBLENBQVcsU0FBQSxHQUFBO0FBQ1QsTUFBQSxJQUFB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

//# sourceURL=/Users/ssun/.atom/packages/go-plus/spec/gocover/gocover-parser-spec.coffee
