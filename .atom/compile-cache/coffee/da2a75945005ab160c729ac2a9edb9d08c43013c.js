(function() {
  var PathExpander, fs, os, path, _;

  fs = require('fs-plus');

  path = require('path');

  os = require('os');

  _ = require('underscore-plus');

  module.exports = PathExpander = (function() {
    function PathExpander(env) {
      this.env = env;
    }

    PathExpander.prototype.expand = function(p, gopath) {
      var pathItem, paths, result, _i, _len;
      if (!((p != null) && p.trim() !== '')) {
        return '';
      }
      if (p.indexOf(path.delimiter) === -1) {
        return this.expandItem(p, gopath);
      }
      paths = p.split(path.delimiter);
      result = '';
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        pathItem = paths[_i];
        pathItem = this.expandItem(pathItem, gopath);
        result = result === '' ? pathItem : result + path.delimiter + pathItem;
      }
      return result;
    };

    PathExpander.prototype.expandItem = function(p, gopath) {
      var goroot, home;
      if (!((p != null) && p.trim() !== '')) {
        return '';
      }
      p = this.replaceGoPathToken(p, gopath);
      switch (os.platform()) {
        case 'darwin':
        case 'freebsd':
        case 'linux':
        case 'sunos':
          if (p.indexOf('~') !== -1) {
            home = this.env.HOME || this.env.HOMEPATH || this.env.USERPROFILE;
            p = p.replace(/~/i, home);
          }
          if (p.toUpperCase().indexOf('$HOME') !== -1) {
            home = this.env.HOME || this.env.HOMEPATH || this.env.USERPROFILE;
            p = p.replace(/\$HOME/i, home);
          }
          if (p.toUpperCase().indexOf('$GOROOT') !== -1) {
            goroot = this.env.GOROOT;
            if ((goroot != null) && goroot !== '') {
              p = p.replace(/\$GOROOT/i, goroot);
            }
          }
          break;
        case 'win32':
          if (p.indexOf('~') !== -1) {
            home = this.env.USERPROFILE;
            p = p.replace(/~/i, home);
          }
          if (p.toUpperCase().indexOf('%HOME%') !== -1) {
            home = this.env.HOME || this.env.HOMEPATH || this.env.USERPROFILE;
            p = p.replace(/%HOME%/i, home);
          }
          if (p.toUpperCase().indexOf('%USERPROFILE%') !== -1) {
            home = this.env.USERPROFILE || this.env.HOME || this.env.HOMEPATH;
            p = p.replace(/%USERPROFILE%/i, home);
          }
          if (p.toUpperCase().indexOf('%HOMEPATH%') !== -1) {
            home = this.env.HOMEPATH || this.env.HOME || this.env.USERPROFILE;
            p = p.replace(/%HOMEPATH%/i, home);
          }
          if (p.toUpperCase().indexOf('%GOROOT%') !== -1) {
            goroot = this.env.GOROOT;
            if ((goroot != null) && goroot !== '') {
              p = p.replace(/%GOROOT%/i, goroot);
            }
          }
      }
      return this.resolveAndNormalize(p);
    };

    PathExpander.prototype.replaceGoPathToken = function(p, gopath) {
      if (!((gopath != null) && gopath !== '')) {
        return p;
      }
      gopath = gopath.indexOf(path.delimiter) === -1 ? gopath.trim() : gopath.split(path.delimiter)[0].trim();
      p = p.replace(/^\$GOPATH/i, gopath.trim() + '/');
      p = p.replace(/^%GOPATH%/i, gopath.trim());
      if ((p == null) || p.trim() === '') {
        return '';
      }
      return p.trim();
    };

    PathExpander.prototype.resolveAndNormalize = function(p) {
      var result;
      if (!((p != null) && p.trim() !== '')) {
        return '';
      }
      result = path.resolve(path.normalize(p));
      return result;
    };

    return PathExpander;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL3NzdW4vLmF0b20vcGFja2FnZXMvZ28tcGx1cy9saWIvdXRpbC9wYXRoZXhwYW5kZXIuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDZCQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLE9BQUEsQ0FBUSxTQUFSLENBQUwsQ0FBQTs7QUFBQSxFQUNBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQURQLENBQUE7O0FBQUEsRUFFQSxFQUFBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FGTCxDQUFBOztBQUFBLEVBR0EsQ0FBQSxHQUFJLE9BQUEsQ0FBUSxpQkFBUixDQUhKLENBQUE7O0FBQUEsRUFLQSxNQUFNLENBQUMsT0FBUCxHQUNNO0FBQ1MsSUFBQSxzQkFBQyxHQUFELEdBQUE7QUFDWCxNQUFBLElBQUMsQ0FBQSxHQUFELEdBQU8sR0FBUCxDQURXO0lBQUEsQ0FBYjs7QUFBQSwyQkFHQSxNQUFBLEdBQVEsU0FBQyxDQUFELEVBQUksTUFBSixHQUFBO0FBQ04sVUFBQSxpQ0FBQTtBQUFBLE1BQUEsSUFBQSxDQUFBLENBQWlCLFdBQUEsSUFBTyxDQUFDLENBQUMsSUFBRixDQUFBLENBQUEsS0FBYyxFQUF0QyxDQUFBO0FBQUEsZUFBTyxFQUFQLENBQUE7T0FBQTtBQUNBLE1BQUEsSUFBaUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxJQUFJLENBQUMsU0FBZixDQUFBLEtBQTZCLENBQUEsQ0FBOUQ7QUFBQSxlQUFPLElBQUMsQ0FBQSxVQUFELENBQVksQ0FBWixFQUFlLE1BQWYsQ0FBUCxDQUFBO09BREE7QUFBQSxNQUVBLEtBQUEsR0FBUSxDQUFDLENBQUMsS0FBRixDQUFRLElBQUksQ0FBQyxTQUFiLENBRlIsQ0FBQTtBQUFBLE1BR0EsTUFBQSxHQUFTLEVBSFQsQ0FBQTtBQUlBLFdBQUEsNENBQUE7NkJBQUE7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

//# sourceURL=/Users/ssun/.atom/packages/go-plus/lib/util/pathexpander.coffee
