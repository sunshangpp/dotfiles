'use babel';

/* eslint-disable no-use-before-define */

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.create = create;

function create(rawVariables) {
  var variables = {};

  function addVariable(parentPath, variable) {
    var path = pathJoin(parentPath, variable.path);
    var children = variable.children;

    variables[path] = {
      name: variable.name,
      loaded: true,
      hasChildren: children ? !!children.length : false,
      value: variable.value,
      parentPath: parentPath
    };
    if (children) {
      children.forEach(function (v) {
        addVariable(path, v);
      });
    }
  }

  rawVariables.map(function (variable) {
    var v = factory.variable(variable);
    v.path = v.name = variable.name;
    addVariable('', v);
  });

  return variables;
}

function pathJoin() {
  for (var _len = arguments.length, items = Array(_len), _key = 0; _key < _len; _key++) {
    items[_key] = arguments[_key];
  }

  return items.filter(function (i) {
    return i !== '';
  }).join('.');
}

var factory = {
  variable: function variable(_variable) {
    if (_variable.unreadable !== '') {
      return { value: '(unreadable ' + _variable.unreadable + ')' };
    }

    if (!_variable.value && _variable.addr === 0) {
      return { value: [shortType(_variable.type), nil()] };
    }

    var fn = KINDS[_variable.kind];
    if (fn.startsWith('complex')) {
      fn = 'complex';
    } else if (!factory[fn]) {
      fn = 'default';
    }
    return factory[fn](_variable);
  },
  array: function array(variable) {
    return factory.slice(variable);
  },
  slice: function slice(variable) {
    var children = variable.children.map(function (c, i) {
      var _factory$variable = factory.variable(c);

      var value = _factory$variable.value;
      var children = _factory$variable.children;

      return { path: i, name: formatNumber(i), value: value, children: children };
    });

    var diff = variable.len - variable.children.length;
    if (diff > 0) {
      children.push({ path: 'more', name: '... +' + diff + ' more' });
    }

    var kind = KINDS[variable.kind];
    var typeInfo = kind === 'slice' && ['(len: ', formatNumber(variable.len), ', cap: ', formatNumber(variable.cap), ')'];
    return {
      value: [shortType(variable.type), typeInfo],
      children: children
    };
  },
  ptr: function ptr(variable) {
    var child = variable.children[0];
    if (variable.type === '') {
      return { value: nil() };
    }

    if (child.onlyAddr) {
      return {
        value: ['(', shortType(variable.type), ')(', formatAddr(child), ')']
      };
    }

    var _factory$variable2 = factory.variable(child);

    var value = _factory$variable2.value;
    var children = _factory$variable2.children;

    return {
      value: ['*', value],
      children: children
    };
  },
  unsafePointer: function unsafePointer(variable) {
    return {
      value: ['unsafe.Pointer(', formatAddr(variable.children[0]), ')']
    };
  },
  string: function string(variable) {
    var diff = variable.len - variable.value.length;
    return {
      value: {
        className: 'string',
        value: ['"' + variable.value + '"', diff > 0 && '... +' + diff + ' more']
      }
    };
  },
  chan: function chan(variable) {
    // could also be rendered as struct
    // return factory.struct(variable)

    var content = undefined;
    if (variable.children.length === 0) {
      content = nil();
    } else {
      var c0 = factory.variable(variable.children[0]);
      var c1 = factory.variable(variable.children[1]);
      if (c0.children) {
        console.log(variable.children[0]);
      }
      if (c1.children) {
        console.log(variable.children[1]);
      }
      content = [c0.value, '/', c1.value];
    }
    return {
      value: [shortType(variable.type), content]
    };
  },
  struct: function struct(variable) {
    var type = shortType(variable.type);
    var diff = variable.len - variable.children.length;
    if (diff > 0) {
      return {
        value: [type && ['(*', type, ')'], '(', formatAddr(variable), ')']
      };
    }

    var children = variable.children.map(function (c) {
      var _factory$variable3 = factory.variable(c);

      var value = _factory$variable3.value;
      var children = _factory$variable3.children;

      return { path: c.name, name: c.name, value: value, children: children };
    });
    return {
      value: type,
      children: children
    };
  },
  'interface': function _interface(variable) {
    var child = variable.children[0];
    if (child.kind === 0 && child.addr === 0) {
      return {
        value: [shortType(variable.type), nil()]
      };
    }

    // nicer handling for errors
    if (variable.type === 'error' && child.type === '*struct errors.errorString') {
      return {
        value: ['error ', factory.variable(child.children[0].children[0]).value]
      };
    }

    var _factory$variable4 = factory.variable(child);

    var value = _factory$variable4.value;
    var children = _factory$variable4.children;

    return {
      value: [shortType(variable.type), ' (', value, ')'],
      children: children
    };
  },
  map: function map(variable) {
    var children = [];
    for (var i = 0; i < variable.children.length; i += 2) {
      var _factory$variable5 = factory.variable(variable.children[i]);

      var kv = _factory$variable5.value;
      var kc = _factory$variable5.children;

      var _factory$variable6 = factory.variable(variable.children[i + 1]);

      var vv = _factory$variable6.value;
      var vc = _factory$variable6.children;

      if (!kc && !vc) {
        children.push({ path: i, name: kv, value: vv });
      } else {
        children.push({
          path: i,
          name: '{ key, value }',
          children: [{ path: 'key', name: 'key', value: kv, children: kc }, { path: 'value', name: 'value', value: vv, children: vc }]
        });
      }
    }

    var diff = variable.len - variable.children.length / 2;
    if (diff > 0) {
      children.push({ path: 'more', name: '... +' + diff + ' more' });
    }

    return {
      value: shortType(variable.type),
      children: children
    };
  },
  func: function func(variable) {
    return {
      value: variable.value ? shortType(variable.value) : nil()
    };
  },
  complex: function complex(variable) {
    var _factory$variable7 = factory.variable(variable.children[0]);

    var v0 = _factory$variable7.value;

    var _factory$variable8 = factory.variable(variable.children[1]);

    var v1 = _factory$variable8.value;

    return { value: ['(', v0, v1, 'i)'] };
  },
  'default': function _default(variable) {
    var kind = KINDS[variable.kind];
    var className = undefined;
    if (variable.value) {
      if (kind.match(NUMERIC_REGEX)) {
        className = 'constant numeric';
      } else if (kind === 'bool') {
        className = 'constant language';
      }
    }
    return {
      value: { className: className, value: variable.value || '(unknown ' + KINDS[variable.kind] + ')' }
    };
  }
};

var NUMERIC_REGEX = /^(u)?(int|float)/;
var KINDS = ['invalid', 'bool', 'int', 'int8', 'int16', 'int32', 'int64', 'uint', 'uint8', 'uint16', 'uint32', 'uint64', 'uintptr', 'float32', 'float64', 'complex64', 'complex128', 'array', 'chan', 'func', 'interface', 'map', 'ptr', 'slice', 'string', 'struct', 'unsafePointer'
// total: 27...
];

function shortType(type) {
  if (!type) {
    return '';
  }
  if (type.startsWith('map[')) {
    // does not work maps with maps:
    // map[map[int]string]float32
    // map[float32]map[int]string
    // map[map[int]string]map[float32]string
    var parts = type.split(']');
    return ['map[', shortType(parts[0].substr(4)), ']', shortType(parts[1])];
  }
  if (type.startsWith('struct ')) {
    type = type.substr('struct '.length);
  }
  var t = '';
  if (type.startsWith('[')) {
    var closingIndex = type.indexOf(']');
    if (closingIndex >= 0) {
      closingIndex++;
      t = type.substring(0, closingIndex);
      type = type.substring(closingIndex);
    }
  }
  if (type.startsWith('*')) {
    t += '*';
    type = type.substring(1);
  }
  t += type.split('/').pop();
  return t;
}
function nil() {
  return { value: ' nil', className: 'constant language' };
}
function formatNumber(value) {
  return { value: value, className: 'constant numeric' };
}
function formatAddr(variable) {
  return formatNumber('0x' + variable.addr.toString(16));
}
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/ssun/.atom/packages/go-debug/lib/delve-variables.js
