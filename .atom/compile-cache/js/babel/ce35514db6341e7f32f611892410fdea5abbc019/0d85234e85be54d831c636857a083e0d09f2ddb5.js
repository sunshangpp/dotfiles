Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.init = init;
exports.dispose = dispose;

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _atom = require('atom');

var _store = require('./store');

var _delve = require('./delve');

var Delve = _interopRequireWildcard(_delve);

var _utils = require('./utils');

'use babel';

var editors = new Map();

function observeTextEditors(editor) {
  var grammar = editor.getGrammar();
  if (grammar.scopeName !== 'source.go') {
    return;
  }
  if (editors.has(editor)) {
    // update the editor
    updateMarkers(editor);
    return;
  }

  var o = {
    markers: [], // contains the breakpoint markers
    gutter: editor.addGutter({ name: 'go-debug', priority: -100 })
  };
  editors.set(editor, o);

  updateMarkers(editor);

  var gutterView = atom.views.getView(o.gutter);
  gutterView.addEventListener('click', onGutterClick.bind(null, editor));
}

function onWillDestroyPaneItem(_ref) {
  var editor = _ref.item;

  var file = editor && editor.getPath && editor.getPath();
  if (file) {
    destroyEditor(editors.get(editor));
    editors['delete'](editor);
  }
}

var lastStackPC = undefined;

var lineMarker = undefined;
var removeLineMarker = function removeLineMarker() {
  return lineMarker && lineMarker.destroy();
};

function openAndHighlight(stack) {
  if (!stack) {
    // finished or just started -> no line marker visible
    removeLineMarker();
    lastStackPC = 0;
    return;
  }

  if (stack.pc === lastStackPC) {
    return;
  }
  lastStackPC = stack.pc;

  // remove any previous line marker
  removeLineMarker();

  // open the file
  var line = stack.line - 1; // dlv = 1 indexed line / atom = 0 indexed line
  atom.workspace.open(stack.file, { initialLine: line, searchAllPanes: true }).then(function () {
    // create a new marker
    var editor = atom.workspace.getActiveTextEditor();
    lineMarker = editor.markBufferPosition({ row: line });
    editor.decorateMarker(lineMarker, { type: 'line', 'class': 'go-debug-debug-line' });

    // center the line
    editor.scrollToBufferPosition([line, 0], { center: true });
  });
}

function updateMarkers(editor) {
  var bps = (0, _store.getBreakpoints)(editor && editor.getPath());

  // update and add markers
  bps.forEach(function (bp) {
    return updateMarker(editor, bp.file, bp.line, bp);
  });

  // remove remaining
  var file = editor.getPath();
  var editorBps = editors.get(editor).markers;
  editorBps.forEach(function (_ref2) {
    var line = _ref2.line;

    if ((0, _store.indexOfBreakpoint)(bps, file, line) === -1) {
      updateMarker(editor, file, line);
    }
  });
}

function updateMarker(editor, file, line, bp) {
  var o = editors.get(editor);
  if (!o) {
    return; // editor not visible, nothing to show
  }

  var index = o.markers.findIndex(function (_ref3) {
    var l = _ref3.line;
    return l === line;
  });
  var marker = o.markers[index];
  if (!bp) {
    if (marker) {
      marker.decoration.getMarker().destroy();
    }
    o.markers.splice(index, 1);
    return;
  }

  var el = document.createElement('div');
  el.className = 'go-debug-breakpoint go-debug-breakpoint-state-' + bp.state;
  el.dataset.state = bp.state;
  el.title = bp.message || ''; // TODO: add texts for other breakpoint states
  var decoration = {
    'class': 'go-debug-gutter-breakpoint',
    item: el
  };

  if (!marker) {
    // create a new decoration
    var _marker = editor.markBufferPosition({ row: line });
    _marker.onDidChange((0, _utils.debounce)(onMarkerDidChange.bind(null, { file: file, line: line, marker: _marker }), 50));
    o.markers.push({
      marker: _marker,
      line: line,
      bp: bp,
      decoration: o.gutter.decorateMarker(_marker, decoration)
    });
  } else {
    // check if the breakpoint has even changed
    if (marker.bp === bp) {
      return;
    }
    marker.bp = bp;

    // update an existing decoration
    marker.decoration.setProperties(Object.assign({}, marker.decoration.getProperties(), decoration));
  }
}

function onMarkerDidChange(_ref4, event) {
  var file = _ref4.file;
  var line = _ref4.line;
  var marker = _ref4.marker;

  if (!event.isValid) {
    // marker is not valid anymore - text at marker got
    // replaced or was removed -> remove the breakpoint
    Delve.removeBreakpoint(file, line);
    return;
  }

  Delve.updateBreakpointLine(file, line, marker.getStartBufferPosition().row);
}

var debouncedStoreChange = (0, _utils.debounce)(function () {
  editors.forEach(function (o, editor) {
    return updateMarkers(editor);
  });

  // open the file of the selected stacktrace and highlight the current line
  var state = _store.store.getState();
  openAndHighlight(state.delve.stacktrace[state.delve.selectedStacktrace]);
}, 50);

var subscriptions = undefined;

function init() {
  subscriptions = new _atom.CompositeDisposable(atom.workspace.observeTextEditors(observeTextEditors), atom.workspace.onWillDestroyPaneItem(onWillDestroyPaneItem), { dispose: _store.store.subscribe(debouncedStoreChange) });
}

function dispose() {
  editors.forEach(destroyEditor);
  editors.clear();

  removeLineMarker();
  lineMarker = null;

  subscriptions.dispose();
  subscriptions = null;
}

function destroyEditor(o) {
  if (!o) {
    return;
  }

  try {
    o.gutter.destroy();
  } catch (e) {
    console.warn('go-debug', e);
  }

  // remove all breakpoint decorations (marker)
  o.markers.forEach(function (bp) {
    return bp.decoration.getMarker().destroy();
  });
}

function onGutterClick(editor, ev) {
  var editorView = atom.views.getView(editor);

  var _editorView$component$screenPositionForMouseEvent = editorView.component.screenPositionForMouseEvent(ev);

  var line = _editorView$component$screenPositionForMouseEvent.row;

  line = editor.bufferRowForScreenRow(line);

  // TODO: conditions via right click menu?

  var file = editor.getPath();
  var o = editors.get(editor);
  var deco = o.markers.find(function (_ref5) {
    var l = _ref5.line;
    return l === line;
  });
  if (deco) {
    Delve.removeBreakpoint(file, line);
    return;
  }

  Delve.addBreakpoint(file, line);
}
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/ssun/.atom/packages/go-debug/lib/editors.js
