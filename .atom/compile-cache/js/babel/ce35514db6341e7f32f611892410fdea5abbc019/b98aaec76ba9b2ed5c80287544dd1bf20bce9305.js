function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/* eslint-env jasmine */

var _libGocoverParser = require('./../lib/gocover-parser');

var _fsPlus = require('fs-plus');

var _fsPlus2 = _interopRequireDefault(_fsPlus);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

'use babel';

describe('gocover-parser', function () {
  var goconfig = null;
  var env = undefined;
  var directory = undefined;
  var filePath = undefined;
  var testFilePath = undefined;

  beforeEach(function () {
    waitsForPromise(function () {
      return atom.packages.activatePackage('go-config').then(function (pack) {
        goconfig = pack.mainModule.provide();
      });
    });

    waitsFor(function () {
      return goconfig !== null;
    });

    runs(function () {
      _temp2['default'].track();
      directory = _temp2['default'].mkdirSync();
      env = Object.assign({}, goconfig.environment());
      env['GOPATH'] = directory;
      filePath = _path2['default'].join(directory, 'src', 'github.com', 'testuser', 'example', 'go-plus.go');
      testFilePath = _path2['default'].join(directory, 'src', 'github.com', 'testuser', 'example', 'go-plus_test.go');
      _fsPlus2['default'].writeFileSync(filePath, 'package main\n\nimport "fmt"\n\nfunc main()  {\n\tfmt.Println(Hello())\n}\n\nfunc Hello() string {\n\treturn "Hello, 世界"\n}\n');
      _fsPlus2['default'].writeFileSync(testFilePath, 'package main\n\nimport "testing"\n\nfunc TestHello(t *testing.T) {\n\tresult := Hello()\n\tif result != "Hello, 世界" {\n\t\tt.Errorf("Expected %s - got %s", "Hello, 世界", result)\n\t}\n}');
    });
  });

  it('parses the file for a single package correctly', function () {
    var cmd = undefined;
    var tempDir = _temp2['default'].mkdirSync();
    var tempFile = _path2['default'].join(tempDir, 'coverage.out');
    var args = ['test', '-coverprofile=' + tempFile];
    var cwd = _path2['default'].join(directory, 'src', 'github.com', 'testuser', 'example');
    var locatorOptions = { directory: cwd, env: env };
    var p = goconfig.locator.findTool('go', locatorOptions).then(function (c) {
      expect(c).toBeTruthy();
      cmd = c;
      return;
    });

    waitsForPromise(function () {
      return p;
    });

    runs(function () {
      var executorOptions = { cwd: cwd, env: env };
      p = goconfig.executor.exec(cmd, args, executorOptions).then(function (r) {
        expect(r.exitcode).toBe(0);
        expect(r.stderr).toBeFalsy();
        expect(r.stdout).toBeTruthy();
      });
    });

    waitsForPromise(function () {
      return p;
    });

    runs(function () {
      var retext = '^' + _path2['default'].join(directory, 'src') + _path2['default'].sep;
      if (_os2['default'].platform() === 'win32') {
        retext = retext.replace(/\\/g, '\\\\');
      }

      var re = new RegExp(retext);
      var packagePath = filePath.replace(re, '');

      var r = (0, _libGocoverParser.ranges)(tempFile);
      expect(r).toBeTruthy();
      expect(r.length).toBeGreaterThan(0);

      var result = _lodash2['default'].filter(r, function (r) {
        return _lodash2['default'].endsWith(filePath, r.file);
      });
      expect(result).toBeTruthy();
      expect(result.length).toBe(2);
      expect(result[0]).toBeDefined();
      expect(result[0].range.start).toBeDefined();
      expect(result[0].range.end).toBeDefined();
      expect(result[0].range.start.column).toBe(13);
      expect(result[0].range.start.row).toBe(4);
      expect(result[0].range.end.column).toBe(1);
      expect(result[0].range.end.row).toBe(6);
      expect(result[0].count).toBe(0);
      expect(result[0].file).toBe(packagePath);

      expect(result[1]).toBeDefined();
      expect(result[1].range.start).toBeDefined();
      expect(result[1].range.end).toBeDefined();
      expect(result[1].range.start.column).toBe(20);
      expect(result[1].range.start.row).toBe(8);
      expect(result[1].range.end.column).toBe(1);
      expect(result[1].range.end.row).toBe(10);
      expect(result[1].count).toBe(1);
      expect(result[1].file).toBe(packagePath);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/ssun/.atom/packages/tester-go/spec/gocover-parser-spec.js
