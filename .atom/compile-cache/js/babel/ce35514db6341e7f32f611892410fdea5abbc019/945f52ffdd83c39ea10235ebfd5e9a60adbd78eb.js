function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/* eslint-env jasmine */

var _libExecutor = require('../lib/executor');

var _libPathhelper = require('./../lib/pathhelper');

var _libPathhelper2 = _interopRequireDefault(_libPathhelper);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

'use babel';

describe('executor', function () {
  var executor = null;
  var prefix = null;
  var result = null;
  var error = null;

  beforeEach(function () {
    runs(function () {
      result = null;
      error = null;
      prefix = '/';
      if (_os2['default'].platform() === 'win32') {
        prefix = 'C:\\';
      }
      executor = new _libExecutor.Executor();
    });
  });

  describe('when the executor is used', function () {
    it('has a valid environment', function () {
      expect(executor).toBeDefined();
      expect(executor.environment).toBeDefined();
      expect(executor.environment()).toBeDefined();
      expect(executor.environment()).toBeTruthy();
      expect(executor.environment().PATH).toBeDefined();
      expect(executor.environment().PATH).not.toBe('');
    });
  });

  describe('when asynchronously executing a command', function () {
    it('succeeds', function () {
      var command = 'env';
      if (_os2['default'].platform() === 'win32') {
        command = _path2['default'].resolve(__dirname, 'tools', 'env', 'env_windows_amd64.exe');
      }

      waitsForPromise(function () {
        return executor.exec(command, [], { cwd: prefix }).then(function (r) {
          result = r;
        })['catch'](function (e) {
          error = e;
        });
      });

      runs(function () {
        expect(result).toBeDefined();
        expect(result.exitcode).toBeDefined();
        expect(result.exitcode).toBe(0);
        expect(result.stdout).toBeDefined();
        expect(result.stdout).not.toBe('');
        expect(result.stderr).toBeDefined();
        expect(result.stderr).toBe('');

        expect(result.error).toBeFalsy();
        expect(error).toBeFalsy();
      });
    });

    it('sets the working directory correctly', function () {
      var command = 'pwd';
      if (_os2['default'].platform() === 'win32') {
        command = _path2['default'].resolve(__dirname, 'tools', 'pwd', 'pwd_windows_amd64.exe');
      }

      waitsForPromise(function () {
        return executor.exec(command, [], { cwd: _libPathhelper2['default'].home() }).then(function (r) {
          result = r;
        })['catch'](function (e) {
          error = e;
        });
      });

      runs(function () {
        expect(result).toBeDefined();
        expect(result.exitcode).toBeDefined();
        expect(result.exitcode).toBe(0);
        expect(result.stdout).toBeDefined();
        expect(result.stdout).toBe(_libPathhelper2['default'].home() + '\n');
        expect(result.stderr).toBeDefined();
        expect(result.stderr).toBe('');

        expect(result.error).toBeFalsy();
        expect(error).toBeFalsy();
      });
    });

    it('sets the environment correctly', function () {
      var command = 'env';
      if (_os2['default'].platform() === 'win32') {
        command = _path2['default'].resolve(__dirname, 'tools', 'env', 'env_windows_amd64.exe');
      }
      var env = { testenv: 'testing' };

      waitsForPromise(function () {
        return executor.exec(command, [], { env: env }).then(function (r) {
          result = r;
        })['catch'](function (e) {
          error = e;
        });
      });

      runs(function () {
        expect(result).toBeDefined();
        expect(result.exitcode).toBeDefined();
        expect(result.exitcode).toBe(0);
        expect(result.stdout).toBeDefined();
        expect(result.stdout).toContain('testenv=testing\n');
        expect(result.stderr).toBeDefined();
        expect(result.stderr).toBe('');

        expect(result.error).toBeFalsy();
        expect(error).toBeFalsy();
      });
    });

    it('handles and returns an ENOENT error if the command was not found', function () {
      waitsForPromise(function () {
        return executor.exec('nonexistentcommand', []).then(function (r) {
          result = r;
        })['catch'](function (e) {
          error = e;
        });
      });

      runs(function () {
        expect(result).toBeDefined();
        expect(result).toBeTruthy();
        expect(result.error).toBeDefined();
        expect(result.error).toBeTruthy();
        expect(result.error.code).toBe('ENOENT');
        expect(result.error.errno).toBe('ENOENT');
        expect(result.error.message).toBe('spawn nonexistentcommand ENOENT');
        expect(result.error.path).toBe('nonexistentcommand');
        expect(result.exitcode).toBeDefined();
        expect(result.exitcode).not.toBe(0);
        expect(result.exitcode).toBe(127);
        expect(result.stdout).toBeDefined();
        expect(result.stdout).toBe('');
        expect(result.stderr).toBeDefined();
        if (_os2['default'].platform() === 'win32') {
          expect(result.stderr).toBe('\'nonexistentcommand\' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n');
        } else {
          expect(result.stderr).toBe('');
        }
        expect(error).toBeFalsy();
      });
    });
  });

  describe('when synchronously executing a command', function () {
    it('succeeds', function () {
      var command = 'env';
      if (_os2['default'].platform() === 'win32') {
        command = _path2['default'].resolve(__dirname, 'tools', 'env', 'env_windows_amd64.exe');
      }

      var result = executor.execSync(command);
      expect(result.exitcode).toBeDefined();
      expect(result.exitcode).toBe(0);
      expect(result.stdout).toBeDefined();
      expect(result.stdout).not.toBe('');
      expect(result.stderr).toBeDefined();
      expect(result.stderr).toBe('');
      expect(result.error).toBeFalsy();
    });

    it('returns a message if the command was not found', function () {
      var result = executor.execSync('nonexistentcommand');
      expect(result.exitcode).toBeDefined();
      expect(result.exitcode).toBe(127);
      expect(result.stdout).toBeDefined();
      expect(result.stdout).toBe('');
      expect(result.stderr).toBeDefined();
      expect(result.stderr).toBe('');
      expect(result.error).toBeTruthy();
      expect(result.error.code).toBe('ENOENT');
      expect(result.error.errno).toBe('ENOENT');
      expect(result.error.message).toBe('spawnSync nonexistentcommand ENOENT');
      expect(result.error.path).toBe('nonexistentcommand');
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/ssun/.atom/packages/go-config/spec/executor-spec.js
