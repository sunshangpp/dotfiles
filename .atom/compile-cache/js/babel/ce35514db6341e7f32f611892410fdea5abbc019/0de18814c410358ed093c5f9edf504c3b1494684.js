function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/* eslint-env jasmine */

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _libEnvironmentHelpers = require('../lib/environment-helpers');

var _libEnvironmentHelpers2 = _interopRequireDefault(_libEnvironmentHelpers);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

'use babel';

describe('Environment handling', function () {
  var originalEnv = undefined;
  var options = undefined;

  beforeEach(function () {
    originalEnv = process.env;
    delete process._originalEnv;
    options = {
      platform: process.platform,
      env: Object.assign({}, process.env)
    };
  });

  afterEach(function () {
    process.env = originalEnv;
    delete process._originalEnv;
  });

  describe('on OSX, when PWD is not set', function () {
    beforeEach(function () {
      options.platform = 'darwin';
    });

    describe('needsPatching', function () {
      it('returns true if PWD is unset', function () {
        delete options.env.PWD;
        expect(_libEnvironmentHelpers2['default'].needsPatching(options)).toBe(true);
        options.env.PWD = undefined;
        expect(_libEnvironmentHelpers2['default'].needsPatching(options)).toBe(true);
        options.env.PWD = null;
        expect(_libEnvironmentHelpers2['default'].needsPatching(options)).toBe(true);
        options.env.PWD = false;
        expect(_libEnvironmentHelpers2['default'].needsPatching(options)).toBe(true);
      });

      it('returns false if PWD is set', function () {
        options.env.PWD = 'xterm';
        expect(_libEnvironmentHelpers2['default'].needsPatching(options)).toBe(false);
      });
    });

    describe('normalize', function () {
      it('changes process.env if PWD is unset', function () {
        if (process.platform === 'win32') {
          return;
        }
        delete options.env.PWD;
        _libEnvironmentHelpers2['default'].normalize(options);
        expect(process._originalEnv).toBeDefined();
        expect(process._originalEnv).toBeTruthy();
        expect(process.env).toBeDefined();
        expect(process.env).toBeTruthy();
        expect(process.env.PWD).toBeDefined();
        expect(process.env.PWD).toBeTruthy();
        expect(process.env.PATH).toBeDefined();
        expect(process.env.PATH).toBeTruthy();
        expect(process.env.ATOM_HOME).toBeDefined();
        expect(process.env.ATOM_HOME).toBeTruthy();
      });
    });
  });

  describe('on a platform other than OSX', function () {
    beforeEach(function () {
      options.platform = 'penguin';
    });

    describe('needsPatching', function () {
      it('returns false if PWD is set or unset', function () {
        delete options.env.PWD;
        expect(_libEnvironmentHelpers2['default'].needsPatching(options)).toBe(false);
        options.env.PWD = undefined;
        expect(_libEnvironmentHelpers2['default'].needsPatching(options)).toBe(false);
        options.env.PWD = null;
        expect(_libEnvironmentHelpers2['default'].needsPatching(options)).toBe(false);
        options.env.PWD = false;
        expect(_libEnvironmentHelpers2['default'].needsPatching(options)).toBe(false);
        options.env.PWD = '/';
        expect(_libEnvironmentHelpers2['default'].needsPatching(options)).toBe(false);
      });

      it('returns false for linux', function () {
        options.platform = 'linux';
        options.PWD = '/';
        expect(_libEnvironmentHelpers2['default'].needsPatching(options)).toBe(false);
      });

      it('returns false for windows', function () {
        options.platform = 'win32';
        options.PWD = 'c:\\';
        expect(_libEnvironmentHelpers2['default'].needsPatching(options)).toBe(false);
      });
    });

    describe('normalize', function () {
      it('does not change the environment', function () {
        if (process.platform === 'win32') {
          return;
        }
        delete options.env.PWD;
        _libEnvironmentHelpers2['default'].normalize(options);
        expect(process._originalEnv).toBeUndefined();
        expect(process.env).toBeDefined();
        expect(process.env).toBeTruthy();
        expect(process.env.PATH).toBeDefined();
        expect(process.env.PATH).toBeTruthy();
        expect(process.env.PWD).toBeUndefined();
        expect(process.env.PATH).toBe(originalEnv.PATH);
        expect(process.env.ATOM_HOME).toBeDefined();
        expect(process.env.ATOM_HOME).toBeTruthy();
      });
    });
  });

  describe('getFromShell', function () {
    describe('when things are configured properly', function () {
      beforeEach(function () {
        spyOn(_child_process2['default'], 'spawnSync').andReturn({
          stdout: 'FOO=BAR' + _os2['default'].EOL + 'TERM=xterm-something' + _os2['default'].EOL + 'PATH=/usr/bin:/bin:/usr/sbin:/sbin:/crazy/path'
        });
      });

      it('returns an object containing the information from the user\'s shell environment', function () {
        var env = _libEnvironmentHelpers2['default'].getFromShell();
        expect(env.FOO).toEqual('BAR');
        expect(env.TERM).toEqual('xterm-something');
        expect(env.PATH).toEqual('/usr/bin:/bin:/usr/sbin:/sbin:/crazy/path');
      });
    });

    describe('when an error occurs launching the shell', function () {
      beforeEach(function () {
        spyOn(_child_process2['default'], 'spawnSync').andReturn({
          error: new Error('testing when an error occurs')
        });
      });

      it('returns undefined', function () {
        expect(_libEnvironmentHelpers2['default'].getFromShell()).toBeUndefined();
      });

      it('leaves the environment as-is when normalize() is called', function () {
        options.platform = 'darwin';
        delete options.env.PWD;
        expect(_libEnvironmentHelpers2['default'].needsPatching(options)).toBe(true);
        _libEnvironmentHelpers2['default'].normalize(options);
        expect(process.env).toBeDefined();
        expect(process._originalEnv).toBeUndefined();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/ssun/.atom/packages/environment/spec/environment-helpers-spec.js
