function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/* eslint-env jasmine */

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsPlus = require('fs-plus');

var _fsPlus2 = _interopRequireDefault(_fsPlus);

'use babel';

describe('gorename', function () {
  _temp2['default'].track();
  var mainModule = null;
  var gorename = null;
  var editor = null;
  var gopath = null;
  var oldGopath = null;
  var source = null;
  var target = null;

  beforeEach(function () {
    runs(function () {
      if (process.env.GOPATH) {
        oldGopath = process.env.GOPATH;
      }
      gopath = _fsPlus2['default'].realpathSync(_temp2['default'].mkdirSync('gopath-'));
      process.env.GOPATH = gopath;
    });

    waitsForPromise(function () {
      return atom.packages.activatePackage('go-config').then(function () {
        return atom.packages.activatePackage('gorename');
      }).then(function (pack) {
        mainModule = pack.mainModule;
        gorename = mainModule.gorename;
        return;
      });
    });

    waitsFor(function () {
      return mainModule.getGoconfig() !== false;
    });
  });

  afterEach(function () {
    if (oldGopath) {
      process.env.GOPATH = oldGopath;
    } else {
      delete process.env.GOPATH;
    }
  });

  describe('when a simple file is open', function () {
    beforeEach(function () {
      runs(function () {
        source = _path2['default'].join(__dirname, 'fixtures', 'basic');
        target = _path2['default'].join(gopath, 'src', 'basic');
        _fsPlus2['default'].copySync(source, target);
      });

      waitsForPromise(function () {
        return atom.workspace.open(_path2['default'].join(target, 'main.go')).then(function (e) {
          editor = e;
          return;
        });
      });
    });

    it('renames a single token', function () {
      editor.setCursorBufferPosition([4, 5]);
      var info = gorename.wordAndOffset(editor);
      expect(info.word).toBe('foo');
      expect(info.offset).toBe(33);

      var file = editor.getBuffer().getPath();
      var cwd = _path2['default'].dirname(file);
      var r = false;
      var cmd = undefined;
      waitsForPromise(function () {
        return mainModule.getGoconfig().locator.findTool('gorename').then(function (c) {
          expect(c).toBeTruthy();
          cmd = c;
        });
      });
      waitsForPromise(function () {
        return gorename.runGorename(file, info.offset, cwd, 'bar', cmd).then(function (result) {
          r = result;
          return;
        });
      });
      runs(function () {
        expect(r).toBeTruthy();
        expect(r.success).toBe(true);
        expect(r.result.stdout.trim()).toBe('Renamed 2 occurrences in 1 file in 1 package.');
        var expected = _fsPlus2['default'].readFileSync(_path2['default'].join(__dirname, 'fixtures', 'basic-expected', 'main.go'), 'utf8');
        var actual = editor.getText();
        expect(actual).toBe(expected);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zc3VuLy5hdG9tL3BhY2thZ2VzL2dvcmVuYW1lL3NwZWMvZ29yZW5hbWUtc3BlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O29CQUdpQixNQUFNOzs7O29CQUNOLE1BQU07Ozs7c0JBQ1IsU0FBUzs7OztBQUx4QixXQUFXLENBQUE7O0FBT1gsUUFBUSxDQUFDLFVBQVUsRUFBRSxZQUFNO0FBQ3pCLG9CQUFLLEtBQUssRUFBRSxDQUFBO0FBQ1osTUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFBO0FBQ3JCLE1BQUksUUFBUSxHQUFHLElBQUksQ0FBQTtBQUNuQixNQUFJLE1BQU0sR0FBRyxJQUFJLENBQUE7QUFDakIsTUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFBO0FBQ2pCLE1BQUksU0FBUyxHQUFHLElBQUksQ0FBQTtBQUNwQixNQUFJLE1BQU0sR0FBRyxJQUFJLENBQUE7QUFDakIsTUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFBOztBQUVqQixZQUFVLENBQUMsWUFBTTtBQUNmLFFBQUksQ0FBQyxZQUFNO0FBQ1QsVUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRTtBQUN0QixpQkFBUyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFBO09BQy9CO0FBQ0QsWUFBTSxHQUFHLG9CQUFHLFlBQVksQ0FBQyxrQkFBSyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtBQUNuRCxhQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7S0FDNUIsQ0FBQyxDQUFBOztBQUVGLG1CQUFlLENBQUMsWUFBTTtBQUNwQixhQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFNO0FBQzNELGVBQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUE7T0FDakQsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLElBQUksRUFBSztB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QUFBO0FBQ3RCLGNBQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQzVCLGNBQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQywrQ0FBK0MsQ0FBQyxDQUFBO0FBQ3BGLFlBQUksUUFBUSxHQUFHLG9CQUFHLFlBQVksQ0FBQyxrQkFBSyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUNyRyxZQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7QUFDN0IsY0FBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtPQUM5QixDQUFDLENBQUE7S0FDSCxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7Q0FDSCxDQUFDLENBQUEiLCJmaWxlIjoiL1VzZXJzL3NzdW4vLmF0b20vcGFja2FnZXMvZ29yZW5hbWUvc3BlYy9nb3JlbmFtZS1zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCdcbi8qIGVzbGludC1lbnYgamFzbWluZSAqL1xuXG5pbXBvcnQgdGVtcCBmcm9tICd0ZW1wJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCBmcyBmcm9tICdmcy1wbHVzJ1xuXG5kZXNjcmliZSgnZ29yZW5hbWUnLCAoKSA9PiB7XG4gIHRlbXAudHJhY2soKVxuICBsZXQgbWFpbk1vZHVsZSA9IG51bGxcbiAgbGV0IGdvcmVuYW1lID0gbnVsbFxuICBsZXQgZWRpdG9yID0gbnVsbFxuICBsZXQgZ29wYXRoID0gbnVsbFxuICBsZXQgb2xkR29wYXRoID0gbnVsbFxuICBsZXQgc291cmNlID0gbnVsbFxuICBsZXQgdGFyZ2V0ID0gbnVsbFxuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHJ1bnMoKCkgPT4ge1xuICAgICAgaWYgKHByb2Nlc3MuZW52LkdPUEFUSCkge1xuICAgICAgICBvbGRHb3BhdGggPSBwcm9jZXNzLmVudi5HT1BBVEhcbiAgICAgIH1cbiAgICAgIGdvcGF0aCA9IGZzLnJlYWxwYXRoU3luYyh0ZW1wLm1rZGlyU3luYygnZ29wYXRoLScpKVxuICAgICAgcHJvY2Vzcy5lbnYuR09QQVRIID0gZ29wYXRoXG4gICAgfSlcblxuICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PiB7XG4gICAgICByZXR1cm4gYXRvbS5wYWNrYWdlcy5hY3RpdmF0ZVBhY2thZ2UoJ2dvLWNvbmZpZycpLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gYXRvbS5wYWNrYWdlcy5hY3RpdmF0ZVBhY2thZ2UoJ2dvcmVuYW1lJylcbiAgICAgIH0pLnRoZW4oKHBhY2spID0+IHtcbiAgICAgICAgbWFpbk1vZHVsZSA9IHBhY2subWFpbk1vZHVsZVxuICAgICAgICBnb3JlbmFtZSA9IG1haW5Nb2R1bGUuZ29yZW5hbWVcbiAgICAgICAgcmV0dXJuXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB3YWl0c0ZvcigoKSA9PiB7XG4gICAgICByZXR1cm4gbWFpbk1vZHVsZS5nZXRHb2NvbmZpZygpICE9PSBmYWxzZVxuICAgIH0pXG4gIH0pXG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBpZiAob2xkR29wYXRoKSB7XG4gICAgICBwcm9jZXNzLmVudi5HT1BBVEggPSBvbGRHb3BhdGhcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHByb2Nlc3MuZW52LkdPUEFUSFxuICAgIH1cbiAgfSlcblxuICBkZXNjcmliZSgnd2hlbiBhIHNpbXBsZSBmaWxlIGlzIG9wZW4nLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBydW5zKCgpID0+IHtcbiAgICAgICAgc291cmNlID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ2ZpeHR1cmVzJywgJ2Jhc2ljJylcbiAgICAgICAgdGFyZ2V0ID0gcGF0aC5qb2luKGdvcGF0aCwgJ3NyYycsICdiYXNpYycpXG4gICAgICAgIGZzLmNvcHlTeW5jKHNvdXJjZSwgdGFyZ2V0KVxuICAgICAgfSlcblxuICAgICAgd2FpdHNGb3JQcm9taXNlKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIGF0b20ud29ya3NwYWNlLm9wZW4ocGF0aC5qb2luKHRhcmdldCwgJ21haW4uZ28nKSkudGhlbigoZSkgPT4ge1xuICAgICAgICAgIGVkaXRvciA9IGVcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGl0KCdyZW5hbWVzIGEgc2luZ2xlIHRva2VuJywgKCkgPT4ge1xuICAgICAgZWRpdG9yLnNldEN1cnNvckJ1ZmZlclBvc2l0aW9uKFs0LCA1XSlcbiAgICAgIGxldCBpbmZvID0gZ29yZW5hbWUud29yZEFuZE9mZnNldChlZGl0b3IpXG4gICAgICBleHBlY3QoaW5mby53b3JkKS50b0JlKCdmb28nKVxuICAgICAgZXhwZWN0KGluZm8ub2Zmc2V0KS50b0JlKDMzKVxuXG4gICAgICBsZXQgZmlsZSA9IGVkaXRvci5nZXRCdWZmZXIoKS5nZXRQYXRoKClcbiAgICAgIGxldCBjd2QgPSBwYXRoLmRpcm5hbWUoZmlsZSlcbiAgICAgIGxldCByID0gZmFsc2VcbiAgICAgIGxldCBjbWRcbiAgICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PiB7XG4gICAgICAgIHJldHVybiBtYWluTW9kdWxlLmdldEdvY29uZmlnKCkubG9jYXRvci5maW5kVG9vbCgnZ29yZW5hbWUnKS50aGVuKChjKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KGMpLnRvQmVUcnV0aHkoKVxuICAgICAgICAgIGNtZCA9IGNcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICB3YWl0c0ZvclByb21pc2UoKCkgPT4ge1xuICAgICAgICByZXR1cm4gZ29yZW5hbWUucnVuR29yZW5hbWUoZmlsZSwgaW5mby5vZmZzZXQsIGN3ZCwgJ2JhcicsIGNtZCkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgciA9IHJlc3VsdFxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICAgIHJ1bnMoKCkgPT4ge1xuICAgICAgICBleHBlY3QocikudG9CZVRydXRoeSgpXG4gICAgICAgIGV4cGVjdChyLnN1Y2Nlc3MpLnRvQmUodHJ1ZSlcbiAgICAgICAgZXhwZWN0KHIucmVzdWx0LnN0ZG91dC50cmltKCkpLnRvQmUoJ1JlbmFtZWQgMiBvY2N1cnJlbmNlcyBpbiAxIGZpbGUgaW4gMSBwYWNrYWdlLicpXG4gICAgICAgIGxldCBleHBlY3RlZCA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnZml4dHVyZXMnLCAnYmFzaWMtZXhwZWN0ZWQnLCAnbWFpbi5nbycpLCAndXRmOCcpXG4gICAgICAgIGxldCBhY3R1YWwgPSBlZGl0b3IuZ2V0VGV4dCgpXG4gICAgICAgIGV4cGVjdChhY3R1YWwpLnRvQmUoZXhwZWN0ZWQpXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG59KVxuIl19
//# sourceURL=/Users/ssun/.atom/packages/gorename/spec/gorename-spec.js
