//////////////////
// Requires
//////////////////

var Promise = require('bluebird');
var util = require('util');
var fs = require('fs');
var path = require('path');

var File = require('./File');
var Directory = require('./Directory');

//////////////////
// Ctor
//////////////////

function FileManager() {}

//////////////////
// Methods
//////////////////

/**
 * Get the file of current open tab
 */
FileManager.prototype.getCurrentFile = function () {
    var deferred = Promise.pending();

    try {
        deferred.fulfill(new File(atom.workspace.activePaneItem.buffer.file.path));
    } catch (e) {
        deferred.reject(e);
    }

    return deferred.promise;
};

/**
 * Get the files of open tabs
 * @return {File[]}
 */
FileManager.prototype.getOpenFiles = function () {
    var deferred = Promise.pending();

    try {
        var files = [];
        var items = atom.workspace.getActivePane().getItems();
        for (var i in items) {
            files.push(new File(items[i].buffer.file.path));
        }
        deferred.fulfill(files);
    } catch (e) {
        deferred.reject(e);
    }

    return deferred.promise;
};

var treatPath = (function (_treatPath) {
    function treatPath(_x, _x2, _x3) {
        return _treatPath.apply(this, arguments);
    }

    treatPath.toString = function () {
        return _treatPath.toString();
    };

    return treatPath;
})(function (_path, results, deep) {
    var stats = fs.statSync(_path);

    if (stats.isDirectory()) {
        if (deep) {
            var files = fs.readdirSync(_path);
            for (var i in files) {
                treatPath(path.join(_path, files[i]), results, deep);
            }
        } else {
            results.push(new Directory(_path));
        }
    } else {
        if (results.indexOf(_path) < 0) {
            results.push(new File(_path));
        }
    }
});

/**
 * Get the files of open tabs
 * @return {File[]}
 */
FileManager.prototype.getSelection = function (deep) {
    var deferred = Promise.pending();

    try {
        var selectedPaths = atom.workspace.getLeftPanels()[0].getItem().selectedPaths();
        var files = [];
        for (var i in selectedPaths) {
            treatPath(selectedPaths[i], files, deep);
        }
        deferred.resolve(files);
    } catch (e) {
        deferred.reject(e);
    }

    return deferred.promise;
};

module.exports = new FileManager();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zc3VuLy5hdG9tL3BhY2thZ2VzL3NmdHAtZGVwbG95bWVudC9saWIvZmlsZXN5c3RlbS9GaWxlTWFuYWdlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBSUEsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2xDLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUUzQixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0IsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDOzs7Ozs7QUFNdkMsU0FBUyxXQUFXLEdBQUcsRUFDdEI7Ozs7Ozs7OztBQVNELFdBQVcsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFlBQVc7QUFDOUMsUUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDOztBQUVqQyxRQUFJO0FBQ0EsZ0JBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQzlFLENBQUMsT0FBTSxDQUFDLEVBQUU7QUFDUCxnQkFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN0Qjs7QUFFRCxXQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUM7Q0FDM0IsQ0FBQzs7Ozs7O0FBTUYsV0FBVyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsWUFBVztBQUM1QyxRQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7O0FBRWpDLFFBQUk7QUFDQSxZQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDZixZQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3RELGFBQUssSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFO0FBQ25CLGlCQUFLLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDakQ7QUFDRCxnQkFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMzQixDQUFDLE9BQU0sQ0FBQyxFQUFFO0FBQ1AsZ0JBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdEI7O0FBRUQsV0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDO0NBQzNCLENBQUM7O0FBRUYsSUFBSSxTQUFTOzs7Ozs7Ozs7O0dBQUcsVUFBUyxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtBQUMzQyxRQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUUvQixRQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRTtBQUNyQixZQUFJLElBQUksRUFBRTtBQUNOLGdCQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xDLGlCQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssRUFBRTtBQUNqQix5QkFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQzthQUN4RDtTQUNKLE1BQU07QUFDSCxtQkFBTyxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ3RDO0tBQ0osTUFBTTtBQUNILFlBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDNUIsbUJBQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUNqQztLQUNKO0NBQ0osQ0FBQSxDQUFBOzs7Ozs7QUFNRCxXQUFXLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxVQUFTLElBQUksRUFBRTtBQUNoRCxRQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7O0FBRWpDLFFBQUk7QUFDQSxZQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ2hGLFlBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNmLGFBQUssSUFBSSxDQUFDLElBQUksYUFBYSxFQUFFO0FBQ3pCLHFCQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM1QztBQUNELGdCQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzNCLENBQUMsT0FBTSxDQUFDLEVBQUU7QUFDUCxnQkFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN0Qjs7QUFFRCxXQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUM7Q0FDM0IsQ0FBQzs7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMiLCJmaWxlIjoiL1VzZXJzL3NzdW4vLmF0b20vcGFja2FnZXMvc2Z0cC1kZXBsb3ltZW50L2xpYi9maWxlc3lzdGVtL0ZpbGVNYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBSZXF1aXJlc1xuLy8vLy8vLy8vLy8vLy8vLy8vXG5cbnZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG52YXIgRmlsZSA9IHJlcXVpcmUoJy4vRmlsZScpO1xudmFyIERpcmVjdG9yeSA9IHJlcXVpcmUoJy4vRGlyZWN0b3J5Jyk7XG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQ3RvclxuLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIEZpbGVNYW5hZ2VyKCkge1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIE1ldGhvZHNcbi8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEdldCB0aGUgZmlsZSBvZiBjdXJyZW50IG9wZW4gdGFiXG4gKi9cbkZpbGVNYW5hZ2VyLnByb3RvdHlwZS5nZXRDdXJyZW50RmlsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWZlcnJlZCA9IFByb21pc2UucGVuZGluZygpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgZGVmZXJyZWQuZnVsZmlsbChuZXcgRmlsZShhdG9tLndvcmtzcGFjZS5hY3RpdmVQYW5lSXRlbS5idWZmZXIuZmlsZS5wYXRoKSk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBmaWxlcyBvZiBvcGVuIHRhYnNcbiAqIEByZXR1cm4ge0ZpbGVbXX1cbiAqL1xuRmlsZU1hbmFnZXIucHJvdG90eXBlLmdldE9wZW5GaWxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWZlcnJlZCA9IFByb21pc2UucGVuZGluZygpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIGZpbGVzID0gW107XG4gICAgICAgIHZhciBpdGVtcyA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVBhbmUoKS5nZXRJdGVtcygpO1xuICAgICAgICBmb3IgKHZhciBpIGluIGl0ZW1zKSB7XG4gICAgICAgICAgZmlsZXMucHVzaChuZXcgRmlsZShpdGVtc1tpXS5idWZmZXIuZmlsZS5wYXRoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmZXJyZWQuZnVsZmlsbChmaWxlcyk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbnZhciB0cmVhdFBhdGggPSBmdW5jdGlvbihfcGF0aCwgcmVzdWx0cywgZGVlcCkge1xuICAgIHZhciBzdGF0cyA9IGZzLnN0YXRTeW5jKF9wYXRoKTtcblxuICAgIGlmIChzdGF0cy5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgIGlmIChkZWVwKSB7XG4gICAgICAgICAgICB2YXIgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhfcGF0aCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIGZpbGVzKSB7XG4gICAgICAgICAgICAgICAgdHJlYXRQYXRoKHBhdGguam9pbihfcGF0aCwgZmlsZXNbaV0pLCByZXN1bHRzLCBkZWVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChuZXcgRGlyZWN0b3J5KF9wYXRoKSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocmVzdWx0cy5pbmRleE9mKF9wYXRoKSA8IDApIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChuZXcgRmlsZShfcGF0aCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmlsZXMgb2Ygb3BlbiB0YWJzXG4gKiBAcmV0dXJuIHtGaWxlW119XG4gKi9cbkZpbGVNYW5hZ2VyLnByb3RvdHlwZS5nZXRTZWxlY3Rpb24gPSBmdW5jdGlvbihkZWVwKSB7XG4gICAgdmFyIGRlZmVycmVkID0gUHJvbWlzZS5wZW5kaW5nKCk7XG5cbiAgICB0cnkge1xuICAgICAgICB2YXIgc2VsZWN0ZWRQYXRocyA9IGF0b20ud29ya3NwYWNlLmdldExlZnRQYW5lbHMoKVswXS5nZXRJdGVtKCkuc2VsZWN0ZWRQYXRocygpO1xuICAgICAgICB2YXIgZmlsZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBzZWxlY3RlZFBhdGhzKSB7XG4gICAgICAgICAgICB0cmVhdFBhdGgoc2VsZWN0ZWRQYXRoc1tpXSwgZmlsZXMsIGRlZXApO1xuICAgICAgICB9XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoZmlsZXMpO1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgICBkZWZlcnJlZC5yZWplY3QoZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBGaWxlTWFuYWdlcigpO1xuIl19