var $ = require('atom-space-pen-views').$;
var React = require('react-atom-fork');
var BlameListView = require('../views/blame-list-view');
var RemoteRevision = require('../util/RemoteRevision');
var errorController = require('./errorController');

/**
 * Display or hide a BlameListView for the active editor.
 *
 * If the active editor does not have an existing BlameListView, one will be
 * mounted.
 *
 * @param {Blamer} projectBlamer - a Blamer for the current project
 */
function toggleBlame(projectBlamer) {
  var editor = atom.workspace.getActiveTextEditor();
  if (!editor) {
    return;
  } // An unsaved file has no filePath
  var filePath = editor.getPath();
  if (!filePath) {
    return;
  }var editorView = atom.views.getView(editor).spacePenView;
  if (!editorView.blameView) {
    var remoteUrl = projectBlamer.repo.getOriginURL(filePath);
    var remoteRevision;
    try {
      remoteRevision = RemoteRevision.create(remoteUrl);
    } catch (e) {}

    // insert the BlameListView after the gutter div
    var mountPoint = $('<div>', { 'class': 'git-blame-mount' });
    editorView.find('.gutter').after(mountPoint);

    editorView.blameView = React.renderComponent(new BlameListView({
      projectBlamer: projectBlamer,
      remoteRevision: remoteRevision,
      editorView: editorView
    }), mountPoint[0]);
  } else {
    editorView.blameView.toggle();
  }
}

// EXPORTS
module.exports = {
  toggleBlame: toggleBlame
};

// the only exception possible occurs when the template string is invalid
// TODO refactor this to not throw an exception
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zc3VuLy5hdG9tL3BhY2thZ2VzL2dpdC1ibGFtZS9saWIvY29udHJvbGxlcnMvYmxhbWVWaWV3Q29udHJvbGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUMsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDekMsSUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUM7QUFDMUQsSUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDekQsSUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7Ozs7Ozs7Ozs7QUFXckQsU0FBUyxXQUFXLENBQUMsYUFBYSxFQUFFO0FBQ2xDLE1BQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztBQUNsRCxNQUFJLENBQUMsTUFBTTtBQUFFLFdBQU87R0FBQTtBQUdwQixNQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDaEMsTUFBSSxDQUFDLFFBQVE7QUFBRSxXQUFPO0dBQUEsQUFFdEIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDO0FBQ3pELE1BQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFO0FBQ3pCLFFBQUksU0FBUyxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFELFFBQUksY0FBYyxDQUFDO0FBQ25CLFFBQUk7QUFDRixvQkFBYyxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDbkQsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUdYOzs7QUFHRCxRQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUMsT0FBTyxFQUFFLGlCQUFpQixFQUFDLENBQUMsQ0FBQztBQUMxRCxjQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQzs7QUFFN0MsY0FBVSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDLElBQUksYUFBYSxDQUFDO0FBQzdELG1CQUFhLEVBQUUsYUFBYTtBQUM1QixvQkFBYyxFQUFFLGNBQWM7QUFDOUIsZ0JBQVUsRUFBRSxVQUFVO0tBQ3ZCLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNwQixNQUFNO0FBQ0wsY0FBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztHQUMvQjtDQUNGOzs7QUFJRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsYUFBVyxFQUFFLFdBQVc7Q0FDekIsQ0FBQyIsImZpbGUiOiIvVXNlcnMvc3N1bi8uYXRvbS9wYWNrYWdlcy9naXQtYmxhbWUvbGliL2NvbnRyb2xsZXJzL2JsYW1lVmlld0NvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCAkID0gcmVxdWlyZSgnYXRvbS1zcGFjZS1wZW4tdmlld3MnKS4kO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC1hdG9tLWZvcmsnKTtcbmNvbnN0IEJsYW1lTGlzdFZpZXcgPSByZXF1aXJlKCcuLi92aWV3cy9ibGFtZS1saXN0LXZpZXcnKTtcbmNvbnN0IFJlbW90ZVJldmlzaW9uID0gcmVxdWlyZSgnLi4vdXRpbC9SZW1vdGVSZXZpc2lvbicpO1xuY29uc3QgZXJyb3JDb250cm9sbGVyID0gcmVxdWlyZSgnLi9lcnJvckNvbnRyb2xsZXInKTtcblxuXG4vKipcbiAqIERpc3BsYXkgb3IgaGlkZSBhIEJsYW1lTGlzdFZpZXcgZm9yIHRoZSBhY3RpdmUgZWRpdG9yLlxuICpcbiAqIElmIHRoZSBhY3RpdmUgZWRpdG9yIGRvZXMgbm90IGhhdmUgYW4gZXhpc3RpbmcgQmxhbWVMaXN0Vmlldywgb25lIHdpbGwgYmVcbiAqIG1vdW50ZWQuXG4gKlxuICogQHBhcmFtIHtCbGFtZXJ9IHByb2plY3RCbGFtZXIgLSBhIEJsYW1lciBmb3IgdGhlIGN1cnJlbnQgcHJvamVjdFxuICovXG5mdW5jdGlvbiB0b2dnbGVCbGFtZShwcm9qZWN0QmxhbWVyKSB7XG4gIHZhciBlZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKCk7XG4gIGlmICghZWRpdG9yKSByZXR1cm47XG5cbiAgLy8gQW4gdW5zYXZlZCBmaWxlIGhhcyBubyBmaWxlUGF0aFxuICB2YXIgZmlsZVBhdGggPSBlZGl0b3IuZ2V0UGF0aCgpO1xuICBpZiAoIWZpbGVQYXRoKSByZXR1cm47XG5cbiAgdmFyIGVkaXRvclZpZXcgPSBhdG9tLnZpZXdzLmdldFZpZXcoZWRpdG9yKS5zcGFjZVBlblZpZXc7XG4gIGlmICghZWRpdG9yVmlldy5ibGFtZVZpZXcpIHtcbiAgICB2YXIgcmVtb3RlVXJsID0gcHJvamVjdEJsYW1lci5yZXBvLmdldE9yaWdpblVSTChmaWxlUGF0aCk7XG4gICAgdmFyIHJlbW90ZVJldmlzaW9uO1xuICAgIHRyeSB7XG4gICAgICByZW1vdGVSZXZpc2lvbiA9IFJlbW90ZVJldmlzaW9uLmNyZWF0ZShyZW1vdGVVcmwpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIHRoZSBvbmx5IGV4Y2VwdGlvbiBwb3NzaWJsZSBvY2N1cnMgd2hlbiB0aGUgdGVtcGxhdGUgc3RyaW5nIGlzIGludmFsaWRcbiAgICAgIC8vIFRPRE8gcmVmYWN0b3IgdGhpcyB0byBub3QgdGhyb3cgYW4gZXhjZXB0aW9uXG4gICAgfVxuXG4gICAgLy8gaW5zZXJ0IHRoZSBCbGFtZUxpc3RWaWV3IGFmdGVyIHRoZSBndXR0ZXIgZGl2XG4gICAgdmFyIG1vdW50UG9pbnQgPSAkKCc8ZGl2PicsIHsnY2xhc3MnOiAnZ2l0LWJsYW1lLW1vdW50J30pO1xuICAgIGVkaXRvclZpZXcuZmluZCgnLmd1dHRlcicpLmFmdGVyKG1vdW50UG9pbnQpO1xuXG4gICAgZWRpdG9yVmlldy5ibGFtZVZpZXcgPSBSZWFjdC5yZW5kZXJDb21wb25lbnQobmV3IEJsYW1lTGlzdFZpZXcoe1xuICAgICAgcHJvamVjdEJsYW1lcjogcHJvamVjdEJsYW1lcixcbiAgICAgIHJlbW90ZVJldmlzaW9uOiByZW1vdGVSZXZpc2lvbixcbiAgICAgIGVkaXRvclZpZXc6IGVkaXRvclZpZXdcbiAgICB9KSwgbW91bnRQb2ludFswXSk7XG4gIH0gZWxzZSB7XG4gICAgZWRpdG9yVmlldy5ibGFtZVZpZXcudG9nZ2xlKCk7XG4gIH1cbn1cblxuXG4vLyBFWFBPUlRTXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdG9nZ2xlQmxhbWU6IHRvZ2dsZUJsYW1lXG59O1xuIl19