//////////////////
// Requires
//////////////////

var Promise = require('bluebird');
var fs = Promise.promisifyAll(require('fs'));
var path = require('path');
var OperationalError = require('bluebird').Promise.OperationalError;

var SftpConfig = require('./SftpConfig');
var FtpConfig = require('./FtpConfig');
var NoConfigurationFileFoundException = require('./../exceptions/NoConfigurationFileFoundException');
var ConfigurationFileNotReadableException = require('./../exceptions/ConfigurationFileNotReadableException');
var ConfigurationFileSyntaxErrorException = require('./../exceptions/ConfigurationFileSyntaxErrorException');

//////////////////
// Ctor
//////////////////

function ConfigFactory() {}

//////////////////
// Methods
//////////////////

ConfigFactory.prototype.parseConfigFile = function (content) {
    var deferred = Promise.pending();

    try {
        var configData = JSON.parse(content);
        deferred.fulfill(configData);
    } catch (e) {
        if (e.name === 'SyntaxError') {
            deferred.reject(new ConfigurationFileSyntaxErrorException(e.message));
        } else {
            deferred.reject(e);
        }
    }

    return deferred.promise;
};

ConfigFactory.prototype.createConfig = function (configData) {
    var deferred = Promise.pending();

    try {
        var type = configData.type;
        type = type.charAt(0).toUpperCase() + type.substring(1);
        var getter = 'create' + type + 'Config';
        var config = this[getter]();

        for (var key in configData) {
            if (config[key] !== undefined) {
                config[key] = configData[key];
            }
        }
        deferred.resolve(config);
    } catch (e) {
        deferred.reject(e);
    }

    return deferred.promise;
};

/**
 * Create configuration from a file
 * @param {String}   file
 * @param {Function} callback
 */
ConfigFactory.prototype.loadConfig = function (configPath) {
    var deferred = Promise.pending();
    var config = null;
    var self = this;

    return fs.readFileAsync(configPath, 'utf8').then(function (content) {
        return self.parseConfigFile(content);
    }).then(function (configData) {
        return self.createConfig(configData);
    })['catch'](OperationalError, function (e) {
        if (e.code === 'ENOENT') {
            throw new NoConfigurationFileFoundException();
        } else if (e.code === 'EACCES') {
            throw new ConfigurationFileNotReadableException();
        } else {
            throw e;
        }
    });
};

/**
 * @return {SftpConfig}
 */
ConfigFactory.prototype.createSftpConfig = function () {
    return new SftpConfig();
};

/**
 * @return {FtpConfig}
 */
ConfigFactory.prototype.createFtpConfig = function () {
    return new FtpConfig();
};

module.exports = ConfigFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zc3VuLy5hdG9tL3BhY2thZ2VzL3NmdHAtZGVwbG95bWVudC9saWIvY29uZmlncy9Db25maWdGYWN0b3J5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbEMsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUM3QyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0IsSUFBSSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDOztBQUVwRSxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDekMsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3ZDLElBQUksaUNBQWlDLEdBQUcsT0FBTyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFDckcsSUFBSSxxQ0FBcUMsR0FBRyxPQUFPLENBQUMsdURBQXVELENBQUMsQ0FBQztBQUM3RyxJQUFJLHFDQUFxQyxHQUFHLE9BQU8sQ0FBQyx1REFBdUQsQ0FBQyxDQUFDOzs7Ozs7QUFNN0csU0FBUyxhQUFhLEdBQUcsRUFDeEI7Ozs7OztBQU1ELGFBQWEsQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLFVBQVMsT0FBTyxFQUFFO0FBQ3hELFFBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7QUFFakMsUUFBSTtBQUNBLFlBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckMsZ0JBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDaEMsQ0FBQyxPQUFNLENBQUMsRUFBRTtBQUNQLFlBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxhQUFhLEVBQUU7QUFDMUIsb0JBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxxQ0FBcUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUN6RSxNQUFNO0FBQ0gsb0JBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdEI7S0FDSjs7QUFFRCxXQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUM7Q0FDM0IsQ0FBQTs7QUFFRCxhQUFhLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxVQUFTLFVBQVUsRUFBRTtBQUN4RCxRQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7O0FBRWpDLFFBQUk7QUFDQSxZQUFJLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDO0FBQzNCLFlBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEQsWUFBSSxNQUFNLEdBQUcsUUFBUSxHQUFHLElBQUksR0FBRyxRQUFRLENBQUM7QUFDeEMsWUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7O0FBRTVCLGFBQUssSUFBSSxHQUFHLElBQUksVUFBVSxFQUFFO0FBQ3hCLGdCQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLEVBQUU7QUFDM0Isc0JBQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDakM7U0FDSjtBQUNELGdCQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzVCLENBQUMsT0FBTSxDQUFDLEVBQUU7QUFDUCxnQkFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN0Qjs7QUFFRCxXQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUM7Q0FDM0IsQ0FBQTs7Ozs7OztBQU9ELGFBQWEsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVMsVUFBVSxFQUFFO0FBQ3RELFFBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNqQyxRQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDbEIsUUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDOztBQUVoQixXQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUN0QyxJQUFJLENBQUMsVUFBUyxPQUFPLEVBQUU7QUFDcEIsZUFBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3hDLENBQUMsQ0FDRCxJQUFJLENBQUMsVUFBUyxVQUFVLEVBQUU7QUFDdkIsZUFBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3hDLENBQUMsU0FDSSxDQUFDLGdCQUFnQixFQUFFLFVBQVMsQ0FBQyxFQUFFO0FBQ2pDLFlBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7QUFDckIsa0JBQU0sSUFBSSxpQ0FBaUMsRUFBRSxDQUFDO1NBQ2pELE1BQU0sSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtBQUM1QixrQkFBTSxJQUFJLHFDQUFxQyxFQUFFLENBQUM7U0FDckQsTUFBTTtBQUNILGtCQUFNLENBQUMsQ0FBQztTQUNYO0tBQ0osQ0FBQyxDQUFDO0NBQ1YsQ0FBQzs7Ozs7QUFLRixhQUFhLENBQUMsU0FBUyxDQUFDLGdCQUFnQixHQUFHLFlBQVk7QUFDbkQsV0FBTyxJQUFJLFVBQVUsRUFBRSxDQUFDO0NBQzNCLENBQUM7Ozs7O0FBS0YsYUFBYSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsWUFBWTtBQUNsRCxXQUFPLElBQUksU0FBUyxFQUFFLENBQUM7Q0FDMUIsQ0FBQzs7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQyIsImZpbGUiOiIvVXNlcnMvc3N1bi8uYXRvbS9wYWNrYWdlcy9zZnRwLWRlcGxveW1lbnQvbGliL2NvbmZpZ3MvQ29uZmlnRmFjdG9yeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gUmVxdWlyZXNcbi8vLy8vLy8vLy8vLy8vLy8vL1xuXG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG52YXIgZnMgPSBQcm9taXNlLnByb21pc2lmeUFsbChyZXF1aXJlKCdmcycpKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIE9wZXJhdGlvbmFsRXJyb3IgPSByZXF1aXJlKCdibHVlYmlyZCcpLlByb21pc2UuT3BlcmF0aW9uYWxFcnJvcjtcblxudmFyIFNmdHBDb25maWcgPSByZXF1aXJlKFwiLi9TZnRwQ29uZmlnXCIpO1xudmFyIEZ0cENvbmZpZyA9IHJlcXVpcmUoXCIuL0Z0cENvbmZpZ1wiKTtcbnZhciBOb0NvbmZpZ3VyYXRpb25GaWxlRm91bmRFeGNlcHRpb24gPSByZXF1aXJlKFwiLi8uLi9leGNlcHRpb25zL05vQ29uZmlndXJhdGlvbkZpbGVGb3VuZEV4Y2VwdGlvblwiKTtcbnZhciBDb25maWd1cmF0aW9uRmlsZU5vdFJlYWRhYmxlRXhjZXB0aW9uID0gcmVxdWlyZShcIi4vLi4vZXhjZXB0aW9ucy9Db25maWd1cmF0aW9uRmlsZU5vdFJlYWRhYmxlRXhjZXB0aW9uXCIpO1xudmFyIENvbmZpZ3VyYXRpb25GaWxlU3ludGF4RXJyb3JFeGNlcHRpb24gPSByZXF1aXJlKFwiLi8uLi9leGNlcHRpb25zL0NvbmZpZ3VyYXRpb25GaWxlU3ludGF4RXJyb3JFeGNlcHRpb25cIik7XG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQ3RvclxuLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIENvbmZpZ0ZhY3RvcnkoKSB7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gTWV0aG9kc1xuLy8vLy8vLy8vLy8vLy8vLy8vXG5cbkNvbmZpZ0ZhY3RvcnkucHJvdG90eXBlLnBhcnNlQ29uZmlnRmlsZSA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICB2YXIgZGVmZXJyZWQgPSBQcm9taXNlLnBlbmRpbmcoKTtcblxuICAgIHRyeSB7XG4gICAgICAgIHZhciBjb25maWdEYXRhID0gSlNPTi5wYXJzZShjb250ZW50KTtcbiAgICAgICAgZGVmZXJyZWQuZnVsZmlsbChjb25maWdEYXRhKTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KG5ldyBDb25maWd1cmF0aW9uRmlsZVN5bnRheEVycm9yRXhjZXB0aW9uKGUubWVzc2FnZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59XG5cbkNvbmZpZ0ZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZUNvbmZpZyA9IGZ1bmN0aW9uKGNvbmZpZ0RhdGEpIHtcbiAgICB2YXIgZGVmZXJyZWQgPSBQcm9taXNlLnBlbmRpbmcoKTtcblxuICAgIHRyeSB7XG4gICAgICAgIHZhciB0eXBlID0gY29uZmlnRGF0YS50eXBlO1xuICAgICAgICB0eXBlID0gdHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR5cGUuc3Vic3RyaW5nKDEpO1xuICAgICAgICB2YXIgZ2V0dGVyID0gJ2NyZWF0ZScgKyB0eXBlICsgJ0NvbmZpZyc7XG4gICAgICAgIHZhciBjb25maWcgPSB0aGlzW2dldHRlcl0oKTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gY29uZmlnRGF0YSkge1xuICAgICAgICAgICAgaWYgKGNvbmZpZ1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25maWdba2V5XSA9IGNvbmZpZ0RhdGFba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGNvbmZpZyk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgY29uZmlndXJhdGlvbiBmcm9tIGEgZmlsZVxuICogQHBhcmFtIHtTdHJpbmd9ICAgZmlsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuQ29uZmlnRmFjdG9yeS5wcm90b3R5cGUubG9hZENvbmZpZyA9IGZ1bmN0aW9uKGNvbmZpZ1BhdGgpIHtcbiAgICB2YXIgZGVmZXJyZWQgPSBQcm9taXNlLnBlbmRpbmcoKTtcbiAgICB2YXIgY29uZmlnID0gbnVsbDtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICByZXR1cm4gZnMucmVhZEZpbGVBc3luYyhjb25maWdQYXRoLCAndXRmOCcpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLnBhcnNlQ29uZmlnRmlsZShjb250ZW50KTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oY29uZmlnRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY3JlYXRlQ29uZmlnKGNvbmZpZ0RhdGEpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goT3BlcmF0aW9uYWxFcnJvciwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKGUuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTm9Db25maWd1cmF0aW9uRmlsZUZvdW5kRXhjZXB0aW9uKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUuY29kZSA9PT0gJ0VBQ0NFUycpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQ29uZmlndXJhdGlvbkZpbGVOb3RSZWFkYWJsZUV4Y2VwdGlvbigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbn07XG5cbi8qKlxuICogQHJldHVybiB7U2Z0cENvbmZpZ31cbiAqL1xuQ29uZmlnRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlU2Z0cENvbmZpZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFNmdHBDb25maWcoKTtcbn07XG5cbi8qKlxuICogQHJldHVybiB7RnRwQ29uZmlnfVxuICovXG5Db25maWdGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVGdHBDb25maWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBGdHBDb25maWcoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29uZmlnRmFjdG9yeTtcbiJdfQ==