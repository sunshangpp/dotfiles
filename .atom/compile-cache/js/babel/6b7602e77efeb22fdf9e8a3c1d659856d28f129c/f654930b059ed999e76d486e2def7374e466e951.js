var Blamer = require('./util/blamer');
var BlameViewController = require('./controllers/blameViewController');
var errorController = require('./controllers/errorController');
var Directory = require('pathwatcher').Directory;

// reference to the Blamer instance created in initializeContext if this
// project is backed by a git repository.
var projectBlamers = {};

function activate() {
  // git-blame:blame
  atom.commands.add('atom-workspace', 'git-blame:toggle', toggleBlame);
}

function toggleBlame() {
  var editor = atom.workspace.getActivePaneItem();
  if (!editor) {
    return;
  } // An unsaved file has no filePath
  filePath = editor.getPath();
  if (!filePath) {
    return;
  } // blaming an empty file is useless
  if (editor.isEmpty()) {
    return;
  }return atom.project.repositoryForDirectory(new Directory(path.dirname(filePath))).then(function (projectRepo) {
    // Ensure this project is backed by a git repository
    if (!projectRepo) {
      errorController.showError('error-not-backed-by-git');
      return;
    }

    if (!(projectRepo.path in projectBlamers)) {
      projectBlamers[projectRepo.path] = new Blamer(projectRepo);
    }

    BlameViewController.toggleBlame(projectBlamers[projectRepo.path]);
  });
}

// EXPORTS
module.exports = {
  configDefaults: {
    useCustomUrlTemplateIfStandardRemotesFail: false,
    customCommitUrlTemplateString: 'Example -> https://github.com/<%- project %>/<%- repo %>/commit/<%- revision %>',
    dateFormatString: 'YYYY-MM-DD',
    ignoreWhiteSpaceDiffs: false
  },
  toggleBlame: toggleBlame,
  activate: activate
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zc3VuLy5hdG9tL3BhY2thZ2VzL2dpdC1ibGFtZS9saWIvZ2l0LWJsYW1lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN4QyxJQUFNLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0FBQ3pFLElBQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0FBQ2pFLElBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxTQUFTLENBQUE7Ozs7QUFJbEQsSUFBSSxjQUFjLEdBQUcsRUFBRSxDQUFBOztBQUV2QixTQUFTLFFBQVEsR0FBRzs7QUFFbEIsTUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsa0JBQWtCLEVBQUUsV0FBVyxDQUFDLENBQUM7Q0FDdEU7O0FBR0QsU0FBUyxXQUFXLEdBQUc7QUFDckIsTUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFBO0FBQy9DLE1BQUksQ0FBQyxNQUFNO0FBQUUsV0FBTztHQUFBO0FBR3BCLFVBQVEsR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7QUFDM0IsTUFBSSxDQUFDLFFBQVE7QUFBRSxXQUFPO0dBQUE7QUFHdEIsTUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO0FBQUUsV0FBTztHQUFBLEFBRTdCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3BGLFVBQVMsV0FBVyxFQUFFOztBQUVwQixRQUFJLENBQUMsV0FBVyxFQUFFO0FBQ2hCLHFCQUFlLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFDckQsYUFBTztLQUNSOztBQUVELFFBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLGNBQWMsQ0FBQSxBQUFDLEVBQUU7QUFDekMsb0JBQWMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDNUQ7O0FBRUQsdUJBQW1CLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztHQUNuRSxDQUFDLENBQUM7Q0FFTjs7O0FBSUQsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLGdCQUFjLEVBQUU7QUFDZCw2Q0FBeUMsRUFBRSxLQUFLO0FBQ2hELGlDQUE2QixFQUFFLGlGQUFpRjtBQUNoSCxvQkFBZ0IsRUFBRSxZQUFZO0FBQzlCLHlCQUFxQixFQUFFLEtBQUs7R0FDN0I7QUFDRCxhQUFXLEVBQUUsV0FBVztBQUN4QixVQUFRLEVBQUUsUUFBUTtDQUNuQixDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9zc3VuLy5hdG9tL3BhY2thZ2VzL2dpdC1ibGFtZS9saWIvZ2l0LWJsYW1lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQmxhbWVyID0gcmVxdWlyZSgnLi91dGlsL2JsYW1lcicpO1xuY29uc3QgQmxhbWVWaWV3Q29udHJvbGxlciA9IHJlcXVpcmUoJy4vY29udHJvbGxlcnMvYmxhbWVWaWV3Q29udHJvbGxlcicpO1xuY29uc3QgZXJyb3JDb250cm9sbGVyID0gcmVxdWlyZSgnLi9jb250cm9sbGVycy9lcnJvckNvbnRyb2xsZXInKTtcbmNvbnN0IERpcmVjdG9yeSA9IHJlcXVpcmUoJ3BhdGh3YXRjaGVyJykuRGlyZWN0b3J5XG5cbi8vIHJlZmVyZW5jZSB0byB0aGUgQmxhbWVyIGluc3RhbmNlIGNyZWF0ZWQgaW4gaW5pdGlhbGl6ZUNvbnRleHQgaWYgdGhpc1xuLy8gcHJvamVjdCBpcyBiYWNrZWQgYnkgYSBnaXQgcmVwb3NpdG9yeS5cbnZhciBwcm9qZWN0QmxhbWVycyA9IHt9XG5cbmZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAvLyBnaXQtYmxhbWU6YmxhbWVcbiAgYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20td29ya3NwYWNlJywgJ2dpdC1ibGFtZTp0b2dnbGUnLCB0b2dnbGVCbGFtZSk7XG59XG5cblxuZnVuY3Rpb24gdG9nZ2xlQmxhbWUoKSB7XG4gIHZhciBlZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVQYW5lSXRlbSgpXG4gIGlmICghZWRpdG9yKSByZXR1cm47XG5cbiAgLy8gQW4gdW5zYXZlZCBmaWxlIGhhcyBubyBmaWxlUGF0aFxuICBmaWxlUGF0aCA9IGVkaXRvci5nZXRQYXRoKClcbiAgaWYgKCFmaWxlUGF0aCkgcmV0dXJuO1xuXG4gIC8vIGJsYW1pbmcgYW4gZW1wdHkgZmlsZSBpcyB1c2VsZXNzXG4gIGlmIChlZGl0b3IuaXNFbXB0eSgpKSByZXR1cm47XG5cbiAgcmV0dXJuIGF0b20ucHJvamVjdC5yZXBvc2l0b3J5Rm9yRGlyZWN0b3J5KG5ldyBEaXJlY3RvcnkocGF0aC5kaXJuYW1lKGZpbGVQYXRoKSkpLnRoZW4oXG4gICAgZnVuY3Rpb24ocHJvamVjdFJlcG8pIHtcbiAgICAgIC8vIEVuc3VyZSB0aGlzIHByb2plY3QgaXMgYmFja2VkIGJ5IGEgZ2l0IHJlcG9zaXRvcnlcbiAgICAgIGlmICghcHJvamVjdFJlcG8pIHtcbiAgICAgICAgZXJyb3JDb250cm9sbGVyLnNob3dFcnJvcignZXJyb3Itbm90LWJhY2tlZC1ieS1naXQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIShwcm9qZWN0UmVwby5wYXRoIGluIHByb2plY3RCbGFtZXJzKSkge1xuICAgICAgICBwcm9qZWN0QmxhbWVyc1twcm9qZWN0UmVwby5wYXRoXSA9IG5ldyBCbGFtZXIocHJvamVjdFJlcG8pO1xuICAgICAgfVxuXG4gICAgICBCbGFtZVZpZXdDb250cm9sbGVyLnRvZ2dsZUJsYW1lKHByb2plY3RCbGFtZXJzW3Byb2plY3RSZXBvLnBhdGhdKTtcbiAgICB9KTtcblxufVxuXG5cbi8vIEVYUE9SVFNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBjb25maWdEZWZhdWx0czoge1xuICAgIHVzZUN1c3RvbVVybFRlbXBsYXRlSWZTdGFuZGFyZFJlbW90ZXNGYWlsOiBmYWxzZSxcbiAgICBjdXN0b21Db21taXRVcmxUZW1wbGF0ZVN0cmluZzogJ0V4YW1wbGUgLT4gaHR0cHM6Ly9naXRodWIuY29tLzwlLSBwcm9qZWN0ICU+LzwlLSByZXBvICU+L2NvbW1pdC88JS0gcmV2aXNpb24gJT4nLFxuICAgIGRhdGVGb3JtYXRTdHJpbmc6ICdZWVlZLU1NLUREJyxcbiAgICBpZ25vcmVXaGl0ZVNwYWNlRGlmZnM6IGZhbHNlXG4gIH0sXG4gIHRvZ2dsZUJsYW1lOiB0b2dnbGVCbGFtZSxcbiAgYWN0aXZhdGU6IGFjdGl2YXRlXG59O1xuIl19