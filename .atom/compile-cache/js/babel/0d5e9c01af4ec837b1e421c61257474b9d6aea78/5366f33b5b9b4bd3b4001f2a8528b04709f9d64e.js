var _ = require("underscore");
var BlameErrorView = require("../views/blame-error-view");
var strings = require("../locales/strings");

/**
 * A mapping from git error message fragment to the strings error key. When an
 * error is thrown by the blamer, we try to match the errors message to something
 * in this map to decide which message to show the user.
 */
var gitErrorMessageMap = {
  "no such path": "error-file-path-not-checked-in"
};

/**
 * Shows an error to the user with the given message.
 *
 * @param {String} errorMessage - Error message to show the user
 */
function showError(errorMessageKey) {
  var messageString = strings[errorMessageKey];

  if (messageString) {
    var errorView = new BlameErrorView({ message: messageString });
    errorView.attach();
  }
}

/**
 * Handles an error by decoding the message into one to show the user, or just swallowing it.
 *
 * @param {Error} error - The error to be handled.
 */
function handleError(error) {
  var gitErrorKey = _.find(_.keys(gitErrorMessageMap), function (gitErrorFragment) {
    var regex = new RegExp(gitErrorFragment);
    return regex.test(error.message);
  });

  var userMessageKey = gitErrorKey ? gitErrorMessageMap[gitErrorKey] : "";
  if (userMessageKey) {
    // Show the user an error if there is a matching key...
    showError(userMessageKey);
  }
}

// EXPORTS
module.exports = {
  handleError: handleError,
  showError: showError
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zc3VuLy5hdG9tL3BhY2thZ2VzL2dpdC1ibGFtZS9saWIvY29udHJvbGxlcnMvZXJyb3JDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNoQyxJQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUM1RCxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQzs7Ozs7OztBQU85QyxJQUFJLGtCQUFrQixHQUFHO0FBQ3ZCLGdCQUFjLEVBQUUsZ0NBQWdDO0NBQ2pELENBQUM7Ozs7Ozs7QUFPRixTQUFTLFNBQVMsQ0FBQyxlQUFlLEVBQUU7QUFDbEMsTUFBSSxhQUFhLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDOztBQUU3QyxNQUFJLGFBQWEsRUFBRTtBQUNqQixRQUFJLFNBQVMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxFQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUMsQ0FBQyxDQUFDO0FBQzdELGFBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztHQUNwQjtDQUVGOzs7Ozs7O0FBT0QsU0FBUyxXQUFXLENBQUMsS0FBSyxFQUFFO0FBQzFCLE1BQUksV0FBVyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLFVBQVMsZ0JBQWdCLEVBQUU7QUFDOUUsUUFBSSxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUN6QyxXQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0dBQ2xDLENBQUMsQ0FBQzs7QUFFSCxNQUFJLGNBQWMsR0FBRyxXQUFXLEdBQUcsa0JBQWtCLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3hFLE1BQUksY0FBYyxFQUFFOztBQUVsQixhQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7R0FDM0I7Q0FDRjs7O0FBR0QsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLGFBQVcsRUFBRSxXQUFXO0FBQ3hCLFdBQVMsRUFBRSxTQUFTO0NBQ3JCLENBQUMiLCJmaWxlIjoiL1VzZXJzL3NzdW4vLmF0b20vcGFja2FnZXMvZ2l0LWJsYW1lL2xpYi9jb250cm9sbGVycy9lcnJvckNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xuY29uc3QgQmxhbWVFcnJvclZpZXcgPSByZXF1aXJlKCcuLi92aWV3cy9ibGFtZS1lcnJvci12aWV3Jyk7XG5jb25zdCBzdHJpbmdzID0gcmVxdWlyZSgnLi4vbG9jYWxlcy9zdHJpbmdzJyk7XG5cbi8qKlxuICogQSBtYXBwaW5nIGZyb20gZ2l0IGVycm9yIG1lc3NhZ2UgZnJhZ21lbnQgdG8gdGhlIHN0cmluZ3MgZXJyb3Iga2V5LiBXaGVuIGFuXG4gKiBlcnJvciBpcyB0aHJvd24gYnkgdGhlIGJsYW1lciwgd2UgdHJ5IHRvIG1hdGNoIHRoZSBlcnJvcnMgbWVzc2FnZSB0byBzb21ldGhpbmdcbiAqIGluIHRoaXMgbWFwIHRvIGRlY2lkZSB3aGljaCBtZXNzYWdlIHRvIHNob3cgdGhlIHVzZXIuXG4gKi9cbnZhciBnaXRFcnJvck1lc3NhZ2VNYXAgPSB7XG4gICdubyBzdWNoIHBhdGgnOiAnZXJyb3ItZmlsZS1wYXRoLW5vdC1jaGVja2VkLWluJ1xufTtcblxuLyoqXG4gKiBTaG93cyBhbiBlcnJvciB0byB0aGUgdXNlciB3aXRoIHRoZSBnaXZlbiBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBlcnJvck1lc3NhZ2UgLSBFcnJvciBtZXNzYWdlIHRvIHNob3cgdGhlIHVzZXJcbiAqL1xuZnVuY3Rpb24gc2hvd0Vycm9yKGVycm9yTWVzc2FnZUtleSkge1xuICB2YXIgbWVzc2FnZVN0cmluZyA9IHN0cmluZ3NbZXJyb3JNZXNzYWdlS2V5XTtcblxuICBpZiAobWVzc2FnZVN0cmluZykge1xuICAgIHZhciBlcnJvclZpZXcgPSBuZXcgQmxhbWVFcnJvclZpZXcoe21lc3NhZ2U6IG1lc3NhZ2VTdHJpbmd9KTtcbiAgICBlcnJvclZpZXcuYXR0YWNoKCk7XG4gIH1cblxufVxuXG4vKipcbiAqIEhhbmRsZXMgYW4gZXJyb3IgYnkgZGVjb2RpbmcgdGhlIG1lc3NhZ2UgaW50byBvbmUgdG8gc2hvdyB0aGUgdXNlciwgb3IganVzdCBzd2FsbG93aW5nIGl0LlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIC0gVGhlIGVycm9yIHRvIGJlIGhhbmRsZWQuXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yKSB7XG4gIHZhciBnaXRFcnJvcktleSA9IF8uZmluZChfLmtleXMoZ2l0RXJyb3JNZXNzYWdlTWFwKSwgZnVuY3Rpb24oZ2l0RXJyb3JGcmFnbWVudCkge1xuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoZ2l0RXJyb3JGcmFnbWVudCk7XG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QoZXJyb3IubWVzc2FnZSk7XG4gIH0pO1xuXG4gIHZhciB1c2VyTWVzc2FnZUtleSA9IGdpdEVycm9yS2V5ID8gZ2l0RXJyb3JNZXNzYWdlTWFwW2dpdEVycm9yS2V5XSA6ICcnO1xuICBpZiAodXNlck1lc3NhZ2VLZXkpIHtcbiAgICAvLyBTaG93IHRoZSB1c2VyIGFuIGVycm9yIGlmIHRoZXJlIGlzIGEgbWF0Y2hpbmcga2V5Li4uXG4gICAgc2hvd0Vycm9yKHVzZXJNZXNzYWdlS2V5KTtcbiAgfVxufVxuXG4vLyBFWFBPUlRTXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaGFuZGxlRXJyb3I6IGhhbmRsZUVycm9yLFxuICBzaG93RXJyb3I6IHNob3dFcnJvclxufTtcbiJdfQ==