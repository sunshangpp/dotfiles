var $ = require("atom").$;
var React = require("atom").React;
var BlameListView = require("../views/blame-list-view");
var RemoteRevision = require("../util/RemoteRevision");
var errorController = require("./errorController");

/**
 * Display or hide a BlameListView for the active editor.
 *
 * If the active editor does not have an existing BlameListView, one will be
 * mounted.
 *
 * @param {Blamer} projectBlamer - a Blamer for the current project
 */
function toggleBlame(projectBlamer) {
  var editor = atom.workspace.getActiveTextEditor();
  if (!editor) {
    return;
  } // An unsaved file has no filePath
  var filePath = editor.getPath();
  if (!filePath) {
    return;
  }var editorView = atom.views.getView(editor).spacePenView;
  if (!editorView.blameView) {
    var remoteUrl = projectBlamer.repo.getOriginURL(filePath);
    var remoteRevision;
    try {
      remoteRevision = RemoteRevision.create(remoteUrl);
    } catch (e) {}

    // insert the BlameListView after the gutter div
    var mountPoint = $("<div>", { "class": "git-blame-mount" });
    editorView.find(".gutter").after(mountPoint);

    editorView.blameView = React.renderComponent(new BlameListView({
      projectBlamer: projectBlamer,
      remoteRevision: remoteRevision,
      editorView: editorView
    }), mountPoint[0]);
  } else {
    editorView.blameView.toggle();
  }
}

// EXPORTS
module.exports = {
  toggleBlame: toggleBlame
};

// the only exception possible occurs when the template string is invalid
// TODO refactor this to not throw an exception
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zc3VuLy5hdG9tL3BhY2thZ2VzL2dpdC1ibGFtZS9saWIvY29udHJvbGxlcnMvYmxhbWVWaWV3Q29udHJvbGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVCLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDcEMsSUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUM7QUFDMUQsSUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDekQsSUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7Ozs7Ozs7Ozs7QUFXckQsU0FBUyxXQUFXLENBQUMsYUFBYSxFQUFFO0FBQ2xDLE1BQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQTtBQUNqRCxNQUFJLENBQUMsTUFBTTtBQUFFLFdBQU87R0FBQTtBQUdwQixNQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDaEMsTUFBSSxDQUFDLFFBQVE7QUFBRSxXQUFPO0dBQUEsQUFFdEIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDO0FBQ3pELE1BQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFO0FBQ3pCLFFBQUksU0FBUyxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFELFFBQUksY0FBYyxDQUFDO0FBQ25CLFFBQUk7QUFDRixvQkFBYyxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDbkQsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUdYOzs7QUFHRCxRQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUMsT0FBTyxFQUFFLGlCQUFpQixFQUFDLENBQUMsQ0FBQztBQUMxRCxjQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQzs7QUFFN0MsY0FBVSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDLElBQUksYUFBYSxDQUFDO0FBQzdELG1CQUFhLEVBQUUsYUFBYTtBQUM1QixvQkFBYyxFQUFFLGNBQWM7QUFDOUIsZ0JBQVUsRUFBRSxVQUFVO0tBQ3ZCLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNwQixNQUFNO0FBQ0wsY0FBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztHQUMvQjtDQUNGOzs7QUFJRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsYUFBVyxFQUFFLFdBQVc7Q0FDekIsQ0FBQyIsImZpbGUiOiIvVXNlcnMvc3N1bi8uYXRvbS9wYWNrYWdlcy9naXQtYmxhbWUvbGliL2NvbnRyb2xsZXJzL2JsYW1lVmlld0NvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCAkID0gcmVxdWlyZSgnYXRvbScpLiQ7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ2F0b20nKS5SZWFjdDtcbmNvbnN0IEJsYW1lTGlzdFZpZXcgPSByZXF1aXJlKCcuLi92aWV3cy9ibGFtZS1saXN0LXZpZXcnKTtcbmNvbnN0IFJlbW90ZVJldmlzaW9uID0gcmVxdWlyZSgnLi4vdXRpbC9SZW1vdGVSZXZpc2lvbicpO1xuY29uc3QgZXJyb3JDb250cm9sbGVyID0gcmVxdWlyZSgnLi9lcnJvckNvbnRyb2xsZXInKTtcblxuXG4vKipcbiAqIERpc3BsYXkgb3IgaGlkZSBhIEJsYW1lTGlzdFZpZXcgZm9yIHRoZSBhY3RpdmUgZWRpdG9yLlxuICpcbiAqIElmIHRoZSBhY3RpdmUgZWRpdG9yIGRvZXMgbm90IGhhdmUgYW4gZXhpc3RpbmcgQmxhbWVMaXN0Vmlldywgb25lIHdpbGwgYmVcbiAqIG1vdW50ZWQuXG4gKlxuICogQHBhcmFtIHtCbGFtZXJ9IHByb2plY3RCbGFtZXIgLSBhIEJsYW1lciBmb3IgdGhlIGN1cnJlbnQgcHJvamVjdFxuICovXG5mdW5jdGlvbiB0b2dnbGVCbGFtZShwcm9qZWN0QmxhbWVyKSB7XG4gIHZhciBlZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKClcbiAgaWYgKCFlZGl0b3IpIHJldHVybjtcblxuICAvLyBBbiB1bnNhdmVkIGZpbGUgaGFzIG5vIGZpbGVQYXRoXG4gIHZhciBmaWxlUGF0aCA9IGVkaXRvci5nZXRQYXRoKCk7XG4gIGlmICghZmlsZVBhdGgpIHJldHVybjtcblxuICB2YXIgZWRpdG9yVmlldyA9IGF0b20udmlld3MuZ2V0VmlldyhlZGl0b3IpLnNwYWNlUGVuVmlldztcbiAgaWYgKCFlZGl0b3JWaWV3LmJsYW1lVmlldykge1xuICAgIHZhciByZW1vdGVVcmwgPSBwcm9qZWN0QmxhbWVyLnJlcG8uZ2V0T3JpZ2luVVJMKGZpbGVQYXRoKTtcbiAgICB2YXIgcmVtb3RlUmV2aXNpb247XG4gICAgdHJ5IHtcbiAgICAgIHJlbW90ZVJldmlzaW9uID0gUmVtb3RlUmV2aXNpb24uY3JlYXRlKHJlbW90ZVVybCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gdGhlIG9ubHkgZXhjZXB0aW9uIHBvc3NpYmxlIG9jY3VycyB3aGVuIHRoZSB0ZW1wbGF0ZSBzdHJpbmcgaXMgaW52YWxpZFxuICAgICAgLy8gVE9ETyByZWZhY3RvciB0aGlzIHRvIG5vdCB0aHJvdyBhbiBleGNlcHRpb25cbiAgICB9XG5cbiAgICAvLyBpbnNlcnQgdGhlIEJsYW1lTGlzdFZpZXcgYWZ0ZXIgdGhlIGd1dHRlciBkaXZcbiAgICB2YXIgbW91bnRQb2ludCA9ICQoJzxkaXY+JywgeydjbGFzcyc6ICdnaXQtYmxhbWUtbW91bnQnfSk7XG4gICAgZWRpdG9yVmlldy5maW5kKCcuZ3V0dGVyJykuYWZ0ZXIobW91bnRQb2ludCk7XG5cbiAgICBlZGl0b3JWaWV3LmJsYW1lVmlldyA9IFJlYWN0LnJlbmRlckNvbXBvbmVudChuZXcgQmxhbWVMaXN0Vmlldyh7XG4gICAgICBwcm9qZWN0QmxhbWVyOiBwcm9qZWN0QmxhbWVyLFxuICAgICAgcmVtb3RlUmV2aXNpb246IHJlbW90ZVJldmlzaW9uLFxuICAgICAgZWRpdG9yVmlldzogZWRpdG9yVmlld1xuICAgIH0pLCBtb3VudFBvaW50WzBdKTtcbiAgfSBlbHNlIHtcbiAgICBlZGl0b3JWaWV3LmJsYW1lVmlldy50b2dnbGUoKTtcbiAgfVxufVxuXG5cbi8vIEVYUE9SVFNcbm1vZHVsZS5leHBvcnRzID0ge1xuICB0b2dnbGVCbGFtZTogdG9nZ2xlQmxhbWVcbn07XG4iXX0=