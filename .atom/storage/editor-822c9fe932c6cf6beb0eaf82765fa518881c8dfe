{"version":1,"windowDimensions":{"x":4,"y":23,"width":1276,"height":777,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/ssun/Downloads/rdc_tumblr_log_parser"],"buffers":[{"text":"# init our variables\ncurrent_minute = :current_minute\nresponse_code = :response_code\nresponses_hash = Hash.new(0)\n@output_file = 'minutes.csv'\n\n# this sucks, but it's 4:30am.\ndef write_to_csv(responses_hash, output_file = @output_file)\n  # append because i have no idea if we want to keep the file or not\n  open(output_file, 'a') do |f|\n    # for each minute\n    responses_hash.each do |minute_val, resp_hash|\n      # for each resp code therein\n      resp_hash.sort.map do |key, _val|\n        f.write(<<-EOT\n# time, #{key}\n#{minute_val}, #{resp_hash[key.to_sym]}\nEOT\n               )\n      end\n    end\n  end\nend\n\n# we don't care about stdin vs arguments vs whatever\n# use lazy to not choke on big files/stdin\nARGF.each_line.lazy.each do |line|\n  # get the current timestamp, chop off the seconds.\n  current_minute = line.split[3].gsub(/\\[|:\\d{2}$/, '').to_sym\n  response_code = line.split[8].to_sym\n\n  # if we need a new hash, make one.\n  unless responses_hash[current_minute].class == Hash\n    responses_hash[current_minute] = Hash.new(0)\n  end\n\n  # increment\n  responses_hash[current_minute][response_code] = \\\n    responses_hash[current_minute][response_code] + 1\nend\nwrite_to_csv(responses_hash)\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":8,"id":"0","maintainHistory":false,"markersById":{"0-7":{"range":{"start":{"row":14,"column":21},"end":{"row":14,"column":21}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":14,"column":21},"end":{"row":14,"column":21}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2}},"nextMarkerLayerId":3,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/ssun/Downloads/rdc_tumblr_log_parser/tumblr_log_parser.rb","digestWhenLastPersisted":"04bca273a201c7ca32c40274f4fea5809aa781e6","preferredLineEnding":null,"deserializer":"TextBuffer","version":4}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/ssun/Downloads/rdc_tumblr_log_parser/tumblr_log_parser.rb","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/ssun/Downloads/rdc_tumblr_log_parser/tumblr_log_parser.rb","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-ruby","language-hyperlink","language-todo"],"destroyedItemURIs":[]},"packageStates":{"linter":{"scope":"File"},"fuzzy-finder":{"/Users/ssun/Downloads/rdc_tumblr_log_parser/tumblr_log_parser.rb":1463689156813},"metrics":{"sessionLength":13315},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/ssun/Downloads/rdc_tumblr_log_parser":{"isExpanded":true,"entries":{}}},"selectedPath":"/Users/ssun/Downloads/rdc_tumblr_log_parser/tumblr_log_parser.rb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}},"fullScreen":false}